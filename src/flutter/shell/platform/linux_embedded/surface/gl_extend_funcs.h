#include <string.h>
#include <time.h>
#include <GLES2/gl2.h>




/* --------------------------------------------------------------- *
 *      F U N C T I O N    D E C L A R A T I O N
 * --------------------------------------------------------------- */
void init_extend_funcs();

void AssertGLError (const char *lpFile, int nLine );

#if 1
#define GLASSERT()  AssertGLError( __FILE__, __LINE__ )
#else
#define GLASSERT()  ((void)0)
#endif

/* render 2d */
int  init_2d_renderer (int w, int h);
int  draw_2d_texture (int texid, int x, int y, int w, int h, int upsidedown);


/* debug strings */
void init_dbgstr (int win_w, int win_h);
int  draw_dbgstr_ex (char *str, int x, int y, float scale, float *col_fg, float *col_bg);
int  draw_dbgstr (char *str, int x, int y);

/* pmeter */
#if 1
#define PMETER_RESET_LAP_EX(id) pmeter_reset_lap (id)
#define PMETER_SET_LAP_EX(id)   pmeter_set_lap (id)
#define PMETER_RESET_LAP()      pmeter_reset_lap (0)
#define PMETER_SET_LAP()        pmeter_set_lap (0)
#else
#define PMETER_RESET_LAP_EX(id) ((void)0)
#define PMETER_SET_LAP_EX(id)   ((void)0)
#define PMETER_RESET_LAP()      ((void)0)
#define PMETER_SET_LAP()        ((void)0)
#endif

double pmeter_get_time_ms ();
void   pmeter_reset_lap (int id);
void   pmeter_set_lap (int id);
double pmeter_get_interval (int id);
void   init_pmeter (int win_w, int win_h, int data_num);
int    draw_pmeter_ex (int id, int x, int y, float scale);
int    draw_pmeter (int x, int y);


/* --------------------------------------------------------------- *
 *      F U N C T I O N    I M P L E M E N T A T I O N
 * --------------------------------------------------------------- */

#if defined (EXTEND_FUNCS_IMPLEMENTATION)
typedef void (*glDrawArraysProc)(GLenum mode, GLint first, GLsizei count);
typedef void (*glDisableVertexAttribArrayProc)(GLuint index);
typedef void (*glEnableVertexAttribArrayProc)(GLuint index);
typedef void (*glBindBufferProc)(GLenum target, GLuint buffer);
typedef GLint (*glGetUniformLocationProc)(GLuint program, const GLchar* name);
typedef GLint (*glGetAttribLocationProc)(GLuint program, const GLchar* name);
typedef void (*glVertexAttribPointerProc)(GLuint indx, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid* ptr);
typedef void (*glTexParameterfProc)(GLenum target, GLenum pname, GLfloat param);
typedef void (*glDisableProc)(GLenum cap);
typedef void (*glEnableProc)(GLenum cap);
typedef void (*glGetProgramivProc)(GLuint program, GLenum pname, GLint* params);
typedef void (*glUniform4fProc)(GLint location, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (*glUniform4fvProc)(GLint location, GLsizei count, const GLfloat* v);
typedef void (*glUniform1iProc)(GLint location, GLint x);
typedef void (*glUniform2fvProc)(GLint location, GLsizei count, const GLfloat* v);
typedef void (*glUniformMatrix4fvProc)(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
typedef void (*glAttachShaderProc)(GLuint program, GLuint shader);
typedef void (*glBlendFuncSeparateProc)(GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
typedef void (*glUseProgramProc)(GLuint program);
typedef void (*glGetShaderivProc)(GLuint shader, GLenum pname, GLint* params);
typedef void (*glBindTextureProc)(GLenum target, GLuint texture);
typedef void (*glActiveTextureProc)(GLenum texture);
typedef void (*glGenTexturesProc)(GLsizei n, GLuint* textures);
typedef void (*glTexImage2DProc)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid* pixels);
typedef GLuint (*glCreateShaderProc)(GLenum type);
typedef GLenum (*glGetErrorProc)(void);
typedef GLenum (*glPixelStoreiProc)(GLenum pname, GLint param);
typedef void (*glShaderSourceProc)(GLuint shader, GLsizei count, const GLchar** string, const GLint* length);
typedef void (*glCompileShaderProc)(GLuint shader);
typedef void (*glDeleteShaderProc)(GLuint shader);
typedef GLuint (*glCreateProgramProc)(void);
typedef void (*glLinkProgramProc)(GLuint program);
typedef void (*glGetShaderInfoLogProc)(GLuint shader, GLsizei bufsize, GLsizei* length, GLchar* infolog);
typedef void (*glGetProgramInfoLogProc)(GLuint program, GLsizei bufsize, GLsizei* length, GLchar* infolog);
typedef void (*glLineWidthProc)(GLfloat width);

/* 
 *  DEF_EXFUNC(glDrawArrays);
 *      ==> "glDrawArraysProc _glDrawArrays;"
 */
#define DEF_EXFUNC(x)   x##Proc _##x
DEF_EXFUNC(glBindBuffer);
DEF_EXFUNC(glVertexAttribPointer);
DEF_EXFUNC(glEnableVertexAttribArray);
DEF_EXFUNC(glDisableVertexAttribArray);
DEF_EXFUNC(glDrawArrays);

DEF_EXFUNC(glGetAttribLocation);
DEF_EXFUNC(glGetUniformLocation);
DEF_EXFUNC(glUniform1i);
DEF_EXFUNC(glUniform2fv);
DEF_EXFUNC(glUniform4f);
DEF_EXFUNC(glUniform4fv);
DEF_EXFUNC(glUniformMatrix4fv);

DEF_EXFUNC(glCreateShader);
DEF_EXFUNC(glDeleteShader);
DEF_EXFUNC(glShaderSource);
DEF_EXFUNC(glCompileShader);
DEF_EXFUNC(glAttachShader);
DEF_EXFUNC(glCreateProgram);
DEF_EXFUNC(glLinkProgram);
DEF_EXFUNC(glUseProgram);
DEF_EXFUNC(glGetShaderiv);
DEF_EXFUNC(glGetProgramiv);
DEF_EXFUNC(glGetShaderInfoLog);
DEF_EXFUNC(glGetProgramInfoLog);

DEF_EXFUNC(glBlendFuncSeparate);
DEF_EXFUNC(glBindTexture);
DEF_EXFUNC(glActiveTexture);
DEF_EXFUNC(glGenTextures);
DEF_EXFUNC(glTexImage2D);
DEF_EXFUNC(glTexParameterf);

DEF_EXFUNC(glEnable);
DEF_EXFUNC(glDisable);
DEF_EXFUNC(glGetError);
DEF_EXFUNC(glPixelStorei);
DEF_EXFUNC(glLineWidth);

/* 
 *  GET_FUNCPTR(glDrawArrays);
 *      ==> "reinterpret_cast<glDrawArraysProc>(eglGetProcAddress("glDrawArrays"));"
 */
#define GET_FUNCPTR(x)  _##x = reinterpret_cast<x##Proc>(eglGetProcAddress(#x))
void
init_extend_funcs ()
{
    GET_FUNCPTR(glBindBuffer);
    GET_FUNCPTR(glVertexAttribPointer);
    GET_FUNCPTR(glEnableVertexAttribArray);
    GET_FUNCPTR(glDisableVertexAttribArray);
    GET_FUNCPTR(glDrawArrays);

    GET_FUNCPTR(glGetAttribLocation);
    GET_FUNCPTR(glGetUniformLocation);
    GET_FUNCPTR(glUniform1i);
    GET_FUNCPTR(glUniform2fv);
    GET_FUNCPTR(glUniform4f);
    GET_FUNCPTR(glUniform4fv);
    GET_FUNCPTR(glUniformMatrix4fv);

    GET_FUNCPTR(glCreateShader);
    GET_FUNCPTR(glDeleteShader);
    GET_FUNCPTR(glShaderSource);
    GET_FUNCPTR(glCompileShader);
    GET_FUNCPTR(glAttachShader);
    GET_FUNCPTR(glCreateProgram);
    GET_FUNCPTR(glLinkProgram);
    GET_FUNCPTR(glUseProgram);
    GET_FUNCPTR(glGetShaderiv);
    GET_FUNCPTR(glGetProgramiv);
    GET_FUNCPTR(glGetShaderInfoLog);
    GET_FUNCPTR(glGetProgramInfoLog);

    GET_FUNCPTR(glBlendFuncSeparate);
    GET_FUNCPTR(glBindTexture);
    GET_FUNCPTR(glActiveTexture);
    GET_FUNCPTR(glGenTextures);
    GET_FUNCPTR(glTexImage2D);
    GET_FUNCPTR(glTexParameterf);

    GET_FUNCPTR(glEnable);
    GET_FUNCPTR(glDisable);
    GET_FUNCPTR(glGetError);
    GET_FUNCPTR(glPixelStorei);
    GET_FUNCPTR(glLineWidth);
}


const char *
get_gl_err_str (int code)
{
    switch( code )
    {
    case 0x0000: return "GL_NO_ERROR";          break;
    case 0x0500: return "GL_INVALID_ENUM";      break;
    case 0x0501: return "GL_INVALID_VALUE";     break;
    case 0x0502: return "GL_INVALID_OPERATION"; break;
    case 0x0503: return "GL_STACK_OVERFLOW";    break;
    case 0x0504: return "GL_STACK_UNDERFLOW";   break;
    case 0x0505: return "GL_OUT_OF_MEMORY";     break;
    default:     return "UNKNOWN ERROR";        break;
    }
}


void
AssertGLError(const char *lpFile, int nLine)
{
    int glerr;
    while ((glerr = _glGetError()) != GL_NO_ERROR)
    {
        printf( "[GL ASSERT ERR] \"%s\"(%d):0x%04x(%s)\n",
                    lpFile, nLine, glerr, get_gl_err_str(glerr));
    }
}


/* --------------------------------------------------------------- *
 *  shader utils
 * --------------------------------------------------------------- */
typedef struct shader_obj_t
{
    GLuint program;
    GLint  loc_vtx;
    GLint  loc_nrm;
    GLint  loc_clr;
    GLint  loc_uv;
    GLint  loc_tex;
    GLint  loc_mtx;
    GLint  loc_mtx_nrm;
} shader_obj_t;


GLuint
compile_shader_text (GLenum shaderType, const char *text)
{
    GLuint shader;
    GLint  stat;

    shader = _glCreateShader (shaderType);
    _glShaderSource  (shader, 1, (const char **)&text, NULL);
    _glCompileShader (shader);

    _glGetShaderiv (shader, GL_COMPILE_STATUS, &stat);
    if (!stat)
    {
        GLsizei len;
        char    *lpBuf;

        _glGetShaderiv (shader, GL_INFO_LOG_LENGTH, &len);
        lpBuf = (char *)malloc (len);

        _glGetShaderInfoLog (shader, len, &len, lpBuf);
        fprintf (stderr, "Error: problem compiling shader.\n");
        fprintf (stderr, "-----------------------------------\n");
        fprintf (stderr, "%s\n", lpBuf);
        fprintf (stderr, "-----------------------------------\n");

        free (lpBuf);

        return 0;
    }

    return shader;
}

GLuint
link_shaders (GLuint vertShader, GLuint fragShader)
{
    GLuint program = _glCreateProgram();

    if (fragShader) _glAttachShader (program, fragShader);
    if (vertShader) _glAttachShader (program, vertShader);

    _glLinkProgram (program);

    {
        GLint stat;
        _glGetProgramiv (program, GL_LINK_STATUS, &stat);
        if (!stat)
        {
            GLsizei len;
            char    *lpBuf;

            _glGetProgramiv (program, GL_INFO_LOG_LENGTH, &len);
            lpBuf = (char *)malloc (len);

            _glGetProgramInfoLog (program, len, &len, lpBuf);
            fprintf (stderr, "Error: problem linking shader.\n");
            fprintf (stderr, "-----------------------------------\n");
            fprintf (stderr, "%s\n", lpBuf);
            fprintf (stderr, "-----------------------------------\n");

            free (lpBuf);

            return 0;
        }
    }

    return program;
}

int
build_shader (const char *strVS, const char *strFS)
{
    GLuint vs, fs, prog;

    vs = compile_shader_text (GL_VERTEX_SHADER, strVS);
    fs = compile_shader_text (GL_FRAGMENT_SHADER, strFS);
    prog = link_shaders (vs, fs);

    return prog;
}

int
generate_shader (shader_obj_t *sobj, char *str_vs, char *str_fs)
{
    GLuint fs, vs, program;

    vs = compile_shader_text (GL_VERTEX_SHADER,   str_vs);
    fs = compile_shader_text (GL_FRAGMENT_SHADER, str_fs);
    if (vs == 0 || fs == 0)
    {
        fprintf (stderr, "Failed to compile shader.\n");
        return -1;
    }

    program = link_shaders (vs, fs);
    if (program == 0)
    {
        fprintf (stderr, "Failed to link shaders.\n");
        return -1;
    }

    _glDeleteShader (vs);
    _glDeleteShader (fs);

    sobj->program = program;
    sobj->loc_vtx = _glGetAttribLocation (program, "a_Vertex"  );
    sobj->loc_nrm = _glGetAttribLocation (program, "a_Normal"  );
    sobj->loc_clr = _glGetAttribLocation (program, "a_Color"   );
    sobj->loc_uv  = _glGetAttribLocation (program, "a_TexCoord");
    sobj->loc_tex = _glGetUniformLocation(program, "u_sampler" );
    sobj->loc_mtx = _glGetUniformLocation(program, "u_PMVMatrix" );
    sobj->loc_mtx_nrm = _glGetUniformLocation(program, "u_NrmMatrix");

    return 0;
}


/* ----------------------------------------------------------- *
 *    matrix utils
 * ----------------------------------------------------------- */
void
matrix_translate (float *m, float x, float y, float z)
{
    float m00, m01, m02, m03;
    float m04, m05, m06, m07;
    float m08, m09, m10, m11;
    float m12, m13, m14, m15;

    m00 = m[ 0]; m04 = m[ 4]; m08 = m[ 8]; /* m12 = m[12]; */
    m01 = m[ 1]; m05 = m[ 5]; m09 = m[ 9]; /* m13 = m[13]; */
    m02 = m[ 2]; m06 = m[ 6]; m10 = m[10]; /* m14 = m[14]; */
    m03 = m[ 3]; m07 = m[ 7]; m11 = m[11]; /* m15 = m[15]; */

    m12 = m[12];
    m13 = m[13];
    m14 = m[14];
    m15 = m[15];

    m12 += m08 * z;
    m13 += m09 * z;
    m14 += m10 * z;
    m15 += m11 * z;

    m12 += m04 * y;
    m13 += m05 * y;
    m14 += m06 * y;
    m15 += m07 * y;

    m12 += m00 * x;
    m13 += m01 * x;
    m14 += m02 * x;
    m15 += m03 * x;

    m[12] = m12;
    m[13] = m13;
    m[14] = m14;
    m[15] = m15;
}

void
matrix_scale (float *m, float x, float y, float z)
{
    float m00, m01, m02, m03;
    float m04, m05, m06, m07;
    float m08, m09, m10, m11;
    /* float m12, m13, m14, m15; */

    m00 = m[ 0]; m04 = m[ 4]; m08 = m[ 8]; /* m12 = m[12]; */
    m01 = m[ 1]; m05 = m[ 5]; m09 = m[ 9]; /* m13 = m[13]; */
    m02 = m[ 2]; m06 = m[ 6]; m10 = m[10]; /* m14 = m[14]; */
    m03 = m[ 3]; m07 = m[ 7]; m11 = m[11]; /* m15 = m[15]; */

    m00 = m00 * x;
    m04 = m04 * y;
    m08 = m08 * z;

    m01 = m01 * x;
    m05 = m05 * y;
    m09 = m09 * z;

    m02 = m02 * x;
    m06 = m06 * y;
    m10 = m10 * z;

    m03 = m03 * x;
    m07 = m07 * y;
    m11 = m11 * z;

    m[ 0] = m00;
    m[ 4] = m04;
    m[ 8] = m08;

    m[ 1] = m01;
    m[ 5] = m05;
    m[ 9] = m09;

    m[ 2] = m02;
    m[ 6] = m06;
    m[10] = m10;

    m[ 3] = m03;
    m[ 7] = m07;
    m[11] = m11;
}

void
matrix_mult (float *m, float *m1, float *m2)
{
    float fm0, fm1, fm2, fm3;
    float fpm00, fpm01, fpm02, fpm03;
    float fpm10, fpm11, fpm12, fpm13;
    float fpm20, fpm21, fpm22, fpm23;
    float fpm30, fpm31, fpm32, fpm33;
    float x, y, z, w;

    /* load pMb */
    fpm00 = m2[0];
    fpm01 = m2[4];
    fpm02 = m2[8];
    fpm03 = m2[12];

    fpm10 = m2[1];
    fpm11 = m2[5];
    fpm12 = m2[9];
    fpm13 = m2[13];

    fpm20 = m2[2];
    fpm21 = m2[6];
    fpm22 = m2[10];
    fpm23 = m2[14];

    fpm30 = m2[3];
    fpm31 = m2[7];
    fpm32 = m2[11];
    fpm33 = m2[15];

    /*  process 0-line of "m1" */
    fm0 = m1[0];
    fm1 = m1[4];
    fm2 = m1[8];
    fm3 = m1[12];

    x = fm0 * fpm00;
    y = fm0 * fpm01;
    z = fm0 * fpm02;
    w = fm0 * fpm03;

    x += fm1 * fpm10;
    y += fm1 * fpm11;
    z += fm1 * fpm12;
    w += fm1 * fpm13;

    x += fm2 * fpm20;
    y += fm2 * fpm21;
    z += fm2 * fpm22;
    w += fm2 * fpm23;

    x += fm3 * fpm30;
    y += fm3 * fpm31;
    z += fm3 * fpm32;
    w += fm3 * fpm33;

    fm0 = m1[1];
    fm1 = m1[5];
    fm2 = m1[9];
    fm3 = m1[13];

    m[0] = x;
    m[4] = y;
    m[8] = z;
    m[12] = w;

    /* *************************** */
    x = fm0 * fpm00;
    y = fm0 * fpm01;
    z = fm0 * fpm02;
    w = fm0 * fpm03;

    x += fm1 * fpm10;
    y += fm1 * fpm11;
    z += fm1 * fpm12;
    w += fm1 * fpm13;

    x += fm2 * fpm20;
    y += fm2 * fpm21;
    z += fm2 * fpm22;
    w += fm2 * fpm23;

    x += fm3 * fpm30;
    y += fm3 * fpm31;
    z += fm3 * fpm32;
    w += fm3 * fpm33;

    fm0 = m1[2];
    fm1 = m1[6];
    fm2 = m1[10];
    fm3 = m1[14];

    m[1] = x;
    m[5] = y;
    m[9] = z;
    m[13] = w;

    /* *************************** */
    x = fm0 * fpm00;
    y = fm0 * fpm01;
    z = fm0 * fpm02;
    w = fm0 * fpm03;

    x += fm1 * fpm10;
    y += fm1 * fpm11;
    z += fm1 * fpm12;
    w += fm1 * fpm13;

    x += fm2 * fpm20;
    y += fm2 * fpm21;
    z += fm2 * fpm22;
    w += fm2 * fpm23;

    x += fm3 * fpm30;
    y += fm3 * fpm31;
    z += fm3 * fpm32;
    w += fm3 * fpm33;

    fm0 = m1[3];
    fm1 = m1[7];
    fm2 = m1[11];
    fm3 = m1[15];

    m[2] = x;
    m[6] = y;
    m[10] = z;
    m[14] = w;

    /* *************************** */
    x = fm0 * fpm00;
    y = fm0 * fpm01;
    z = fm0 * fpm02;
    w = fm0 * fpm03;

    x += fm1 * fpm10;
    y += fm1 * fpm11;
    z += fm1 * fpm12;
    w += fm1 * fpm13;

    x += fm2 * fpm20;
    y += fm2 * fpm21;
    z += fm2 * fpm22;
    w += fm2 * fpm23;

    x += fm3 * fpm30;
    y += fm3 * fpm31;
    z += fm3 * fpm32;
    w += fm3 * fpm33;

    m[3] = x;
    m[7] = y;
    m[11] = z;
    m[15] = w;
}


void
matrix_identity (float *m)
{
    m[ 0] = 1.0f; m[ 4] = 0.0f; m[ 8] = 0.0f; m[12] = 0.0f;
    m[ 1] = 0.0f; m[ 5] = 1.0f; m[ 9] = 0.0f; m[13] = 0.0f;
    m[ 2] = 0.0f; m[ 6] = 0.0f; m[10] = 1.0f; m[14] = 0.0f;
    m[ 3] = 0.0f; m[ 7] = 0.0f; m[11] = 0.0f; m[15] = 1.0f;
}





/* ------------------------------------------------------ *
 *  2D renderer
 * ------------------------------------------------------ */
static char r2d_vs_tex[] = "                          \n\
attribute    vec4    a_Vertex;                        \n\
attribute    vec2    a_TexCoord;                      \n\
varying      vec2    v_TexCoord;                      \n\
uniform      mat4    u_PMVMatrix;                     \n\
                                                      \n\
void main (void)                                      \n\
{                                                     \n\
    gl_Position = u_PMVMatrix * a_Vertex;             \n\
    v_TexCoord  = a_TexCoord;                         \n\
}                                                     \n";

static char r2d_fs_tex[] = "                          \n\
precision mediump float;                              \n\
varying     vec2      v_TexCoord;                     \n\
uniform     sampler2D u_sampler;                      \n\
uniform     vec4      u_Color;                        \n\
                                                      \n\
void main (void)                                      \n\
{                                                     \n\
    gl_FragColor = texture2D (u_sampler, v_TexCoord); \n\
    gl_FragColor *= u_Color;                          \n\
}                                                     \n";


#define R2D_SHADER_NUM 1
static char *s_r2d_shader[R2D_SHADER_NUM * 2] = 
{
    r2d_vs_tex,    r2d_fs_tex,
};

typedef struct r2d_obj_t
{
    shader_obj_t s_sobj[R2D_SHADER_NUM];
    int s_loc_mtx[R2D_SHADER_NUM];
    int s_loc_color[R2D_SHADER_NUM];
    int s_loc_texdim[R2D_SHADER_NUM];

    float s_matprj[16];
} r2d_obj_t;

static r2d_obj_t s_r2d;

static float r2d_varray[] =
{   0.0, 0.0,
    0.0, 1.0,
    1.0, 0.0,
    1.0, 1.0 };

static float r2d_tarray[] =
{   0.0, 0.0,
    0.0, 1.0,
    1.0, 0.0,
    1.0, 1.0 };

static float r2d_tarray2[] =
{   0.0, 1.0,
    0.0, 0.0,
    1.0, 1.0,
    1.0, 0.0 };


static int
set_projection_matrix (int w, int h)
{
    float mat_proj[] =
    {
       0.0f, 0.0f, 0.0f, 0.0f,
       0.0f, 0.0f, 0.0f, 0.0f,
       0.0f, 0.0f, 0.0f, 0.0f,
      -1.0f, 1.0f, 0.0f, 1.0f};

    mat_proj[0] =  2.0f / (float)w;
    mat_proj[5] = -2.0f / (float)h;

    memcpy (s_r2d.s_matprj, mat_proj, 16*sizeof(float));

    GLASSERT ();
    return 0;
}

int
init_2d_renderer (int w, int h)
{
    int i;

    for (i = 0; i < R2D_SHADER_NUM; i ++)
    {
        shader_obj_t *sobj = &s_r2d.s_sobj[i];
        if (generate_shader (sobj, s_r2d_shader[2*i], s_r2d_shader[2*i + 1]) < 0)
        {
            fprintf (stderr, "ERR: %s(%d)\n", __FILE__, __LINE__);
            return -1;
        }

        s_r2d.s_loc_mtx[i]    = _glGetUniformLocation(sobj->program, "u_PMVMatrix");
        s_r2d.s_loc_color[i]  = _glGetUniformLocation(sobj->program, "u_Color");
        s_r2d.s_loc_texdim[i] = _glGetUniformLocation(sobj->program, "u_TexDim");
    }

    set_projection_matrix (w, h);

    return 0;
}


typedef struct _texparam
{
    int          textype;
    int          texid;
    int          x, y, w, h;
    int          texw, texh;
    int          upsidedown;
    float        color[4];
    float        rot;               /* degree */
    float        px, py;            /* pivot */
    int          blendfunc_en;
    unsigned int blendfunc[4];      /* src_rgb, dst_rgb, src_alpha, dst_alpha */
    float        *user_texcoord;
} texparam_t;


static int
draw_2d_texture_in (texparam_t *tparam)
{
    int ttype = tparam->textype;
    int texid = tparam->texid;
    float x   = tparam->x;
    float y   = tparam->y;
    float w   = tparam->w;
    float h   = tparam->h;
    float rot = tparam->rot;
    shader_obj_t *sobj = &s_r2d.s_sobj[ttype];
    float matrix[16];
    float *uv = r2d_tarray;

    int   *s_loc_mtx    = s_r2d.s_loc_mtx;
    int   *s_loc_color  = s_r2d.s_loc_color;
    int   *s_loc_texdim = s_r2d.s_loc_texdim;
    float *s_matprj     = s_r2d.s_matprj;
    
    
    _glBindBuffer (GL_ARRAY_BUFFER, 0);
    _glBindBuffer (GL_ELEMENT_ARRAY_BUFFER, 0);

    _glUseProgram (sobj->program);
    _glActiveTexture (GL_TEXTURE0);
    _glUniform1i(sobj->loc_tex, 0);

    switch (ttype)
    {
    case 0:     /* fill     */
    case 1:     /* tex      */
    case 4:     /* tex_yuyv */
        _glBindTexture (GL_TEXTURE_2D, texid);
        uv = tparam->upsidedown ? r2d_tarray2 : r2d_tarray;
        break;
    case 2:     /* tex_extex */
        //_glBindTexture (GL_TEXTURE_EXTERNAL_OES, texid);
        uv = tparam->upsidedown ? r2d_tarray : r2d_tarray2;
        break;
    default:
        break;
    }

    if (tparam->user_texcoord)
    {
        uv = tparam->user_texcoord;
    }

    if (sobj->loc_uv >= 0)
    {
        _glEnableVertexAttribArray (sobj->loc_uv);
        _glVertexAttribPointer (sobj->loc_uv, 2, GL_FLOAT, GL_FALSE, 0, uv);
    }

    _glEnable (GL_BLEND);

    if (tparam->blendfunc_en)
    {
        _glBlendFuncSeparate (tparam->blendfunc[0], tparam->blendfunc[1],
                   tparam->blendfunc[2], tparam->blendfunc[3]);
    }
    else
    {
        _glBlendFuncSeparate (GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA,
                   GL_ONE, GL_ONE_MINUS_SRC_ALPHA);
    }

    matrix_identity (matrix);
    matrix_translate (matrix, x, y, 0.0f);
    matrix_scale (matrix, w, h, 1.0f);
    matrix_mult (matrix, s_matprj, matrix);

    _glUniformMatrix4fv (s_loc_mtx[ttype], 1, GL_FALSE, matrix);
    _glUniform4fv (s_loc_color[ttype], 1, tparam->color);

    if (s_loc_texdim[ttype] >= 0)
    {
        float texdim[2];
        texdim[0] = tparam->texw;
        texdim[1] = tparam->texh;
        _glUniform2fv (s_loc_texdim[ttype], 1, texdim);
    }

    if (sobj->loc_vtx >= 0)
    {
        _glEnableVertexAttribArray (sobj->loc_vtx);
        _glVertexAttribPointer (sobj->loc_vtx, 2, GL_FLOAT, GL_FALSE, 0, r2d_varray);
    }

    _glDrawArrays (GL_TRIANGLE_STRIP, 0, 4);

    _glDisable (GL_BLEND);
    
    GLASSERT ();
    return 0;
    
}


int
draw_2d_texture (int texid, int x, int y, int w, int h, int upsidedown)
{
    texparam_t tparam = {0};
    tparam.x       = x;
    tparam.y       = y;
    tparam.w       = w;
    tparam.h       = h;
    tparam.texid   = texid;
    tparam.textype = 0;
    tparam.color[0]= 1.0f;
    tparam.color[1]= 1.0f;
    tparam.color[2]= 1.0f;
    tparam.color[3]= 1.0f;
    tparam.upsidedown = upsidedown;
    draw_2d_texture_in (&tparam);

    return 0;
}

/* ---------------------------------------------------------------------------- *
 *  debugstr
 * ---------------------------------------------------------------------------- */
static const char s_strDbgStrVS[] =
    "attribute vec4 a_Vertex;                               \n"
    "attribute vec2 a_UV;                                   \n"
    "uniform   vec4 u_Translate;                            \n"
    "uniform   vec4 u_PrjMul, u_PrjAdd;                     \n"
    "varying   vec2 v_UV;                                   \n"
    "                                                       \n"
    "void main()                                            \n"
    "{                                                      \n"
    "   vec4 pos;                                           \n"
    "   pos         = a_Vertex + u_Translate;               \n"
    "   pos         = pos * u_PrjMul;                       \n"
    "   gl_Position = pos + u_PrjAdd;                       \n"
    "   v_UV        = a_UV;                                 \n"
    "}                                                      \n";

static const char s_strDbgStrFS[] =
    "precision mediump float;                               \n"
    "                                                       \n"
    "varying vec2       v_UV;                               \n"
    "uniform sampler2D  u_Sampler0;                         \n"
    "uniform vec4       u_ColorFG;                          \n"
    "uniform vec4       u_ColorBG;                          \n"
    "                                                       \n"
    "void main()                                            \n"
    "{                                                      \n"
    "   vec4 texcol = texture2D (u_Sampler0, v_UV);         \n"
    "   gl_FragColor = mix (u_ColorBG, u_ColorFG, texcol.r);\n"
    "}                                                      \n";


#define DEBSTR_FONT_WIDTH   (12)
#define DEBSTR_FONT_HEIGHT  (22)
#define DEBSTR_FONT_NUM     (95)
#define DBGSTR_IMAGE_WIDTH  (DEBSTR_FONT_WIDTH*DEBSTR_FONT_NUM)
#define DBGSTR_IMAGE_HEIGHT (DEBSTR_FONT_HEIGHT)

/*
 *  Pixel array data of Font Texture.
 *      - this texture is generated with "Bitstream-Vera-Sans-Mono" font.
 *      - texture width  is (12 * 95) [pix]
 *      - texture height is (22 *  1) [pix]
 *      - each pixel contains 8bit alpha values.
 *
 *  |<---------------------------  12 [pix] x 95 [chars] = 1140 [pix]  ---------------------------->|
 *
 *  +-----------------------------------------------------------------------------------------------+
 *  |0        1         2         3         4         5         6         7         8         9     |
 *  |12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345|
 *  +-----------------------------------------------------------------------------------------------+
 *  | !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~| 22 [pix]
 *  +-----------------------------------------------------------------------------------------------+
 *
 */
static unsigned int
s_font12x22[DBGSTR_IMAGE_WIDTH * DBGSTR_IMAGE_HEIGHT] ={
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xe9aa0200,0x0000000e,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x04000000,0x000ee9cf,0x00000000,
    0xffcf0400,0xff5e0076,0x00000ee9,0x04000000,0x040076cf,0x000076cf,0x00000000,0x0007bd1f,
    0x00000000,0xc9ffe743,0x0000002f,0x00000000,0xba1f0000,0x76ffffff,0x00000000,0x00000000,
    0x0ee9ff5e,0x00000000,0x00000000,0x51e71f00,0x00000000,0xe71f0000,0x00000051,0x00000000,
    0x00000000,0x0000765e,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x5e000000,0x000076ff,0xba1d0000,0x2fc9ffff,0x00000000,0x90420000,0x009cffff,0x00000000,
    0xffb94200,0x29c2ffff,0x00000000,0xe7902600,0x4ec2ffff,0x00000000,0x00000000,0xf7ff5e00,
    0x0000002f,0xffffcf04,0xffffffff,0x0000009c,0x68020000,0x9dffffe7,0x00000029,0xffffff84,
    0xffffffff,0x00009cff,0xc8430000,0x75cdffff,0x00000007,0xe7680200,0x4ec9ffff,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xc8680200,
    0x54f7ffff,0x00000000,0x00000000,0x00000000,0x00000000,0x1f000000,0x0076ffe7,0x02000000,
    0xffffffaa,0x75cdffff,0x00000007,0x68020000,0xcdffffc8,0x02000754,0xffffffaa,0x0754c6ff,
    0x00000000,0xffffcf04,0xffffffff,0x00009cff,0xffff8400,0xffffffff,0x0007c2ff,0x43020000,
    0xf7ffffc8,0x02002299,0x002ff7aa,0x5e000000,0x000076ff,0xffffcf04,0xffffffff,0x00000ee9,
    0xff390000,0xffffffff,0x02000051,0x002ff7aa,0x1f000000,0x002ff7e7,0x2ff7aa02,0x00000000,
    0x02000000,0x0ee9ffaa,0xaa020000,0x022ff7ff,0x07c2ffaa,0x5e000000,0x000076ff,0xba420000,
    0x54cdffff,0x00000000,0xffffcf04,0xc2ffffff,0x00000029,0xba420000,0x54cdffff,0x02000000,
    0xffffffaa,0x2cc2ffff,0x00000000,0xc8680200,0x75cdffff,0x5e000007,0xffffffff,0xffffffff,
    0x029cffff,0x002ff7aa,0x84000000,0x000051ff,0x0051ff84,0x00000000,0xffffe71f,0x00002ff7,
    0x00000000,0x10e9cf04,0x0076ffaa,0x02000000,0x3976ffaa,0x0007c2ff,0x02000000,0x0051ffaa,
    0xffffff84,0xffffffff,0x0007c2ff,0x5e000000,0xc2ffffff,0x02000007,0x002ff7aa,0x00000000,
    0x00000000,0xff840000,0x07c2ffff,0x00000000,0x39000000,0x0051ffff,0x00000000,0x00000000,
    0x00000000,0x00000000,0xcf040000,0x0000009c,0x00000000,0x00000000,0x00000000,0x00000000,
    0x0051ff84,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x39000000,
    0x0007c2ff,0x00000000,0x00000000,0x00000000,0x00000000,0xffff9002,0x000076ff,0x00000000,
    0x00000000,0x00000000,0x0051ff84,0x00000000,0x00000000,0x00000000,0x0051ff84,0x00000000,
    0x00000000,0x07c2e71f,0x00000000,0x51ff8400,0x00000000,0x00000000,0xffffff5e,0x000076ff,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0xffc85d00,0x00000ee9,0x02000000,0x0007c2aa,
    0x00000000,0xf7ffaa02,0x0000079d,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x04000000,0x000ee9cf,0x00000000,0xffcf0400,0xff5e0076,0x00000ee9,
    0x39000000,0x390051ff,0x000051ff,0x00000000,0x0007bd1f,0x39000000,0x840276ff,0x00002ff7,
    0x00000000,0xffe71f00,0x76ffffff,0x00000000,0x00000000,0x0ee9ff5e,0x00000000,0x00000000,
    0x07c28400,0x00000000,0x84000000,0x000007c2,0x00000000,0x00000000,0x0000765e,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xcf040000,0x00000ee9,0xffe71f00,
    0xffffffff,0x00000051,0xffff8400,0x009cffff,0x00000000,0xffffff39,0xffffffff,0x00000051,
    0xffffff39,0xffffffff,0x00000076,0x00000000,0xf7ffcf04,0x0000002f,0xffffcf04,0xffffffff,
    0x0000009c,0xffaa0200,0xffffffff,0x0000009c,0xffffff84,0xffffffff,0x000076ff,0xffff8400,
    0xffffffff,0x0000009c,0xffffaa02,0xffffffff,0x00000051,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0xffff8400,0xffffffff,0x00000076,0x43020000,
    0xf7ffffc8,0x00000775,0x5e000000,0x07c2ffff,0x02000000,0xffffffaa,0xffffffff,0x000007c2,
    0xffaa0200,0xffffffff,0x020051ff,0xffffffaa,0xf7ffffff,0x0000002f,0xffffcf04,0xffffffff,
    0x00009cff,0xffff8400,0xffffffff,0x0007c2ff,0xffaa0200,0xffffffff,0x02009cff,0x002ff7aa,
    0x5e000000,0x000076ff,0xffffcf04,0xffffffff,0x00000ee9,0xff390000,0xffffffff,0x02000051,
    0x002ff7aa,0xe71f0000,0x00002ff7,0x2ff7aa02,0x00000000,0x02000000,0x51ffffaa,0xcf040000,
    0x022ff7ff,0x51ffffaa,0x5e000000,0x000076ff,0xffff3900,0xffffffff,0x00000099,0xffffcf04,
    0xffffffff,0x000051f7,0xffff3900,0xffffffff,0x0200009c,0xffffffaa,0xffffffff,0x00000054,
    0xffffaa02,0xffffffff,0x5e00009c,0xffffffff,0xffffffff,0x029cffff,0x002ff7aa,0x84000000,
    0x000051ff,0x009cff5e,0x00000000,0xaaa1ff5e,0x00002ff7,0x00000000,0x07c2e71f,0x2ff7ff39,
    0x5e000000,0x0207c2ff,0x0076ffaa,0x5e000000,0x0007c2ff,0xffffff84,0xffffffff,0x0007c2ff,
    0x5e000000,0xc2ffffff,0x00000007,0x009cff39,0x00000000,0x00000000,0xff840000,0x07c2ffff,
    0x00000000,0xe71f0000,0x2ff7c8cd,0x00000000,0x00000000,0x00000000,0x00000000,0x39000000,
    0x000051ff,0x00000000,0x00000000,0x00000000,0x00000000,0x0051ff84,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x39000000,0x0007c2ff,0x00000000,0x00000000,
    0x00000000,0x02000000,0xffffffaa,0x000076ff,0x00000000,0x00000000,0x00000000,0x0051ff84,
    0x00000000,0x00000000,0x00000000,0x0051ff84,0x00000000,0x00000000,0x07c2e71f,0x00000000,
    0x51ff8400,0x00000000,0x00000000,0xffffff5e,0x000076ff,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0xaa020000,0x00002ff7,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0xffffff5e,0x00000ee9,0x02000000,0x0007c2aa,0x00000000,0xffffaa02,0x00009cff,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x04000000,
    0x000ee9cf,0x00000000,0xffe71f00,0xff840051,0x000007c2,0x5e000000,0x5e000ee9,0x00000ee9,
    0xba420000,0x9df7ffff,0x84000029,0x39002ff7,0x000076ff,0x00000000,0xa1ff8400,0x00000007,
    0x00000000,0x00000000,0x07c2ff84,0x00000000,0x00000000,0x0076e71f,0x00000000,0x39000000,
    0x000076ff,0x00000000,0x0029c21f,0x1d00765e,0x00002fb9,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0xff5e0000,0x00000076,0x9cffaa02,0xff690207,0x000007c2,0x4e9d8400,
    0x009cff39,0x00000000,0x002c9d39,0xff830200,0x00000ee9,0x072cc239,0xff430000,0x00002ff7,
    0x00000000,0xf7bac984,0x0000002f,0x0ee9cf04,0x00000000,0x00000000,0xf7ff8400,0x26000054,
    0x00000075,0x00000000,0xcf040000,0x00002ff7,0x54ffe71f,0xe7420000,0x00002ff7,0x4ef7ff39,
    0xe7420000,0x00000ee9,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x22758300,0xff430000,0x00000ee9,0xc9ba0400,0x4300004e,0x00009cff,0xaa020000,
    0x2ff7ffff,0x02000000,0x002ff7aa,0xcf1d0000,0x000076ff,0xc9ff8400,0x1b000029,0x02005183,
    0x002ff7aa,0xffba2600,0x00000ee9,0x0ee9cf04,0x00000000,0x00000000,0x51ff8400,0x00000000,
    0x00000000,0xc9ff8400,0x02000032,0x02007a43,0x002ff7aa,0x5e000000,0x000076ff,0x04000000,
    0x000ee9cf,0x00000000,0x00000000,0xff840000,0x02000051,0x002ff7aa,0xf7cf0400,0x00000051,
    0x2ff7aa02,0x00000000,0x02000000,0x76c8f7aa,0xf7390000,0x022ff7c8,0x9cffffaa,0x5e000000,
    0x000076ff,0x7affcf04,0xe7420007,0x000051ff,0x0ee9cf04,0xaa1d0000,0x0007c2ff,0x7affcf04,
    0xe7420007,0x020051ff,0x002ff7aa,0xff830200,0x00000ee9,0x4ef7ff5e,0x681b0000,0x0000007a,
    0x04000000,0x000ee9cf,0x02000000,0x002ff7aa,0x84000000,0x000051ff,0x07c2e71f,0x00000000,
    0x8451ff84,0x000051ff,0x00000000,0x009cff39,0x9cff8400,0xe71f0000,0x000051ff,0x0ee9ff39,
    0xcf040000,0x000051ff,0x00000000,0xcf040000,0x000051ff,0x5e000000,0x000076ff,0x00000000,
    0x2ff7aa02,0x00000000,0x00000000,0x00000000,0x07c2ff39,0x00000000,0xc9e71f00,0xf7ba040e,
    0x0000002f,0x00000000,0x00000000,0x00000000,0x00000000,0x002ff75e,0x00000000,0x00000000,
    0x00000000,0x00000000,0x0051ff84,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x39000000,0x0007c2ff,0x00000000,0x00000000,0x00000000,0x1f000000,0x0029e9e7,
    0x00000000,0x00000000,0x00000000,0x00000000,0x0051ff84,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x51ff8400,0x00000000,0x00000000,
    0x5e000000,0x000076ff,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0xaa020000,0x00002ff7,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x0076ff84,0x00000000,
    0x02000000,0x0007c2aa,0x00000000,0x43000000,0x000ee9e7,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x04000000,0x000ee9cf,0x00000000,0xc2ff3900,
    0xffaa0207,0x00000051,0xaa020000,0xaa0207c2,0x0000009c,0xffff5e00,0xffffffff,0x840007c2,
    0x39002ff7,0x000076ff,0x00000000,0x51ff8400,0x00000000,0x00000000,0x02000000,0x0051ffaa,
    0x00000000,0x00000000,0x002ff784,0x00000000,0x04000000,0x0007c2cf,0x00000000,0x75e36802,
    0xe3687a69,0x00000775,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xe9cf0400,
    0x0000000e,0x0ee9e71f,0xaa020000,0x000051ff,0x00000000,0x009cff39,0x00000000,0x00000000,
    0xaa020000,0x00002ff7,0x00000000,0x84000000,0x000051ff,0x1f000000,0xf7aa32e3,0x0000002f,
    0x0ee9cf04,0x00000000,0x00000000,0x51ffe71f,0x00000000,0x00000000,0x00000000,0xff390000,
    0x0000009c,0x009cff39,0x84000000,0x000051ff,0x0076ff84,0x39000000,0x000051ff,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xaa020000,
    0x00002ff7,0x0ee9aa02,0x00000000,0x0051ff5e,0xe71f0000,0x51ff9ce9,0x02000000,0x002ff7aa,
    0x39000000,0x00009cff,0x0ee9e71f,0x00000000,0x02000000,0x002ff7aa,0x84000000,0x000076ff,
    0x0ee9cf04,0x00000000,0x00000000,0x51ff8400,0x00000000,0x00000000,0x0ee9e71f,0x00000000,
    0x02000000,0x002ff7aa,0x5e000000,0x000076ff,0x04000000,0x000ee9cf,0x00000000,0x00000000,
    0xff840000,0x02000051,0x002ff7aa,0x51ffcf04,0x00000000,0x2ff7aa02,0x00000000,0x02000000,
    0xc29bf7aa,0xa1840007,0x022ff7aa,0xe99bf7aa,0x5e00000e,0x000076ff,0x009cff39,0x5e000000,
    0x00009cff,0x0ee9cf04,0x04000000,0x002ff7cf,0x009cff39,0x5e000000,0x02009cff,0x002ff7aa,
    0xaa020000,0x02002ff7,0x0051ffaa,0x00000000,0x00000000,0x04000000,0x000ee9cf,0x02000000,
    0x002ff7aa,0x84000000,0x000051ff,0x2ff7aa02,0x04000000,0x5e0ee9cf,0x000076ff,0x00000000,
    0x0076ff5e,0xffcf0400,0xff840051,0x0000009c,0x9cff8400,0xff840000,0x0000009c,0x00000000,
    0xff840000,0x0000009c,0x5e000000,0x000076ff,0x00000000,0x9cff3900,0x00000000,0x00000000,
    0x00000000,0x07c2ff39,0x00000000,0x0ec9cf04,0xba040000,0x00000ee9,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x0051ff84,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x39000000,0x0007c2ff,
    0x00000000,0x00000000,0x00000000,0x1f000000,0x0007c2e7,0x00000000,0x00000000,0x00000000,
    0x00000000,0x0051ff84,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x51ff8400,0x00000000,0x00000000,0x5e000000,0x000076ff,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xaa020000,0x00002ff7,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x02000000,0x002ff7aa,0x00000000,0x02000000,0x0007c2aa,0x00000000,
    0x04000000,0x000ee9cf,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x04000000,0x000ee9cf,0x00000000,0x51ff8400,0xc2e71f00,0x02000007,0xffffffaa,
    0xffffffff,0x0ee9ffff,0x71ffcf04,0x4209bd1f,0x39000796,0x840276ff,0x00002ff7,0x00074000,
    0x76ff5e00,0x00000000,0x00000000,0x1f000000,0x0007c2e7,0x00000000,0x04000000,0x0007c2cf,
    0x00000000,0x00000000,0x002ff784,0x00000000,0x901d0000,0x299dffff,0x00000000,0x02000000,
    0x002ff7aa,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x76ff5e00,0x00000000,0x009cff5e,0x5e000000,
    0x000076ff,0x00000000,0x009cff39,0x00000000,0x00000000,0xaa020000,0x000051ff,0x00000000,
    0x84000000,0x000051ff,0xaa020000,0xf7aa029c,0x0000002f,0x0ee9cf04,0x00000000,0x00000000,
    0x07c2ff39,0x00000000,0x00000000,0x00000000,0xffaa0200,0x00000051,0x009ce71f,0x84000000,
    0x000051ff,0x0051ff84,0x39000000,0x000076ff,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x002fb626,0x00000000,0x00000000,0x1f000000,
    0x00004ec2,0x00000000,0x00000000,0x00000000,0xcf040000,0x00002ff7,0x0051ff5e,0x00000000,
    0x009ce71f,0xff390000,0x9cff439c,0x02000000,0x002ff7aa,0x5e000000,0x000076ff,0x0076ff5e,
    0x00000000,0x02000000,0x002ff7aa,0x39000000,0x0007c2ff,0x0ee9cf04,0x00000000,0x00000000,
    0x51ff8400,0x00000000,0x00000000,0x0076ff5e,0x00000000,0x02000000,0x002ff7aa,0x5e000000,
    0x000076ff,0x04000000,0x000ee9cf,0x00000000,0x00000000,0xff840000,0x02000051,0x022ff7aa,
    0x0054ffaa,0x00000000,0x2ff7aa02,0x00000000,0x02000000,0xe353f7aa,0x7aaa022f,0x022ff7aa,
    0xe753f7aa,0x5e000076,0x000076ff,0x0051ff84,0x1f000000,0x0007c2e7,0x0ee9cf04,0x02000000,
    0x002ff7aa,0x0051ff84,0x1f000000,0x0207c2e7,0x002ff7aa,0xaa020000,0x02002ff7,0x002ff7aa,
    0x00000000,0x00000000,0x04000000,0x000ee9cf,0x02000000,0x002ff7aa,0x84000000,0x000051ff,
    0x76ff8400,0x39000000,0x3907c2ff,0x1f009cff,0x002ff7e7,0x0051ff84,0xff390000,0xe9ff4de9,
    0x0000000e,0xf7e71f00,0xf7e71f2f,0x0000002f,0x00000000,0xe9ff3900,0x0000000e,0x5e000000,
    0x000076ff,0x00000000,0xf7aa0200,0x0000002f,0x00000000,0x00000000,0x07c2ff39,0x02000000,
    0x000ec9aa,0x04000000,0x0007c2ba,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0xc8681b00,0x99f7ffff,0x00000007,0x4351ff84,0x71f7ffe7,0x00000000,0x901d0000,
    0xc2ffffe7,0x00000029,0xe7430000,0x3971f7ff,0x0007c2ff,0xb91d0000,0x75f7ffff,0x00000007,
    0xffffe71f,0xffffffff,0x000076ff,0xe7430000,0x3971f7ff,0x0007c2ff,0x1f51ff84,0x51f7ffba,
    0x00000000,0xffff5e00,0x0051ffff,0x00000000,0xffff3900,0x07c2ffff,0x00000000,0x51ff8400,
    0x83000000,0x002ff7ff,0x5e000000,0x000076ff,0x00000000,0xba57ff84,0xba0476ff,0x00079dff,
    0x1f51ff84,0x51f7ffba,0x00000000,0xc8430000,0x54cdffff,0x00000000,0x4351ff84,0x71f7ffe7,
    0x00000000,0xe7430000,0x3971f7ff,0x0007c2ff,0xff5e0000,0xff900276,0x000799ff,0xb9420000,
    0xc2ffffff,0x0200002c,0xffffffaa,0xffffffff,0x000051ff,0x0051ff84,0xff390000,0x000007c2,
    0x009cff5e,0x02000000,0xaa54ffaa,0x00002ff7,0x00000000,0x0ee9e71f,0x9cffaa02,0x39000000,
    0x002ff7ff,0x009cff5e,0x00000000,0x0076ff84,0xffffaa02,0xffffffff,0x00002ff7,0x02000000,
    0x002ff7aa,0x00000000,0x02000000,0x0007c2aa,0x00000000,0x04000000,0x000ee9cf,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x04000000,0x000ee9cf,
    0x00000000,0x07c2aa02,0x51ff3900,0x02000000,0xffffffaa,0xffffffff,0x0ee9ffff,0x07c2e71f,
    0x0007bd1f,0x00000000,0xc9ffe743,0x4200002f,0x0029c9ba,0xe9cf0400,0x0000000e,0x00000000,
    0x39000000,0x000051ff,0x00000000,0x39000000,0x000076ff,0x00000000,0x00000000,0x0076ff39,
    0x00000000,0x901d0000,0x299dffff,0x00000000,0x02000000,0x002ff7aa,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x0ee9cf04,0x00000000,0x0076ff84,0x39000000,0x00009cff,0x00000000,0x009cff39,
    0x00000000,0x00000000,0xcf040000,0x000051ff,0x00000000,0xff690200,0x00000ee9,0xf7390000,
    0xf7aa022f,0x0000002f,0xffffcf04,0x4ec2ffff,0x00000000,0x0076ff5e,0x00000000,0x00000000,
    0x00000000,0xe9e71f00,0x0000000e,0x54ffaa02,0xe7420000,0x000007c2,0x0076ff84,0x39000000,
    0x00009cff,0x1f000000,0x0051ffe7,0x00000000,0x1f000000,0x0051ffe7,0x00000000,0x00000000,
    0xe7680200,0x002ff7ff,0x00000000,0x00000000,0x1f000000,0x75f7ffe7,0x00000007,0x00000000,
    0x00000000,0xffaa0200,0x0200009c,0x0007c2aa,0xf7ff9002,0x009ce799,0xff840000,0xe9e71f51,
    0x0200000e,0x002ff7aa,0xcf280000,0x000051ff,0x0051ff84,0x00000000,0x02000000,0x002ff7aa,
    0x04000000,0x000ee9cf,0x0ee9cf04,0x00000000,0x00000000,0x51ff8400,0x00000000,0x00000000,
    0x0051ff84,0x00000000,0x02000000,0x002ff7aa,0x5e000000,0x000076ff,0x04000000,0x000ee9cf,
    0x00000000,0x00000000,0xff840000,0x02000051,0xaa32f7aa,0x000076ff,0x00000000,0x2ff7aa02,
    0x00000000,0x02000000,0xaa32f7aa,0x32e31f76,0x022ff7aa,0xaa32f7aa,0x5e0007c2,0x020076ff,
    0x002ff7aa,0x04000000,0x000ee9cf,0x0ee9cf04,0x04000000,0x022ff7cf,0x002ff7aa,0x04000000,
    0x020ee9cf,0x002ff7aa,0xff690200,0x000007c2,0x079cff84,0x00000000,0x00000000,0x04000000,
    0x000ee9cf,0x02000000,0x002ff7aa,0x84000000,0x000051ff,0xc2ff3900,0x5e000007,0x1f0076ff,
    0x3907c2e7,0x0251ffff,0x0051ffaa,0xaa020000,0x51ffffff,0x00000000,0xff5e0000,0x76ff91a1,
    0x00000000,0x00000000,0x76ffcf04,0x00000000,0x5e000000,0x000076ff,0x00000000,0xff390000,
    0x0000009c,0x00000000,0x00000000,0x07c2ff39,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xffffaa02,0xffffffff,
    0x00000ec9,0xff99ff84,0xffffffff,0x0000009c,0xffe71f00,0xffffffff,0x000007c2,0xffff5e00,
    0xc6ffffff,0x0007c2ff,0xffe73900,0xffffffff,0x000007c2,0xffffe71f,0xffffffff,0x000076ff,
    0xffff5e00,0x99ffffff,0x0007c2ff,0xe778ff84,0xf7ffffff,0x0000002f,0xffff5e00,0x0051ffff,
    0x00000000,0xffff3900,0x07c2ffff,0x00000000,0x51ff8400,0xff830000,0x00002ff7,0x5e000000,
    0x000076ff,0x00000000,0xffffff84,0xff9cf7ff,0x0051ffff,0xe778ff84,0xf7ffffff,0x0000002f,
    0xffff5e00,0xffffffff,0x00000099,0xff99ff84,0xffffffff,0x0000009c,0xffff5e00,0xc6ffffff,
    0x0007c2ff,0xff5e0000,0xffffaa7a,0x0051ffff,0xffff5e00,0xffffffff,0x02000ee9,0xffffffaa,
    0xffffffff,0x000051ff,0x0051ff84,0xff390000,0x000007c2,0x0ee9e71f,0x1f000000,0x8407c2e7,
    0x000051ff,0x00000000,0x009cff39,0xffe71f00,0xcf040051,0x000076ff,0x2ff7cf04,0x1f000000,
    0x000ee9e7,0xffffaa02,0xffffffff,0x00002ff7,0x02000000,0x002ff7aa,0x00000000,0x02000000,
    0x0007c2aa,0x00000000,0x04000000,0x000ee9cf,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x04000000,0x000ee9cf,0x00000000,0x00000000,0x00000000,
    0x00000000,0xf75e0000,0xf75e002f,0x0000002f,0x0ee9cf04,0x0007bd1f,0x00000000,0x00000000,
    0xc9ba4200,0x0000002c,0xffba1d00,0x0000009c,0x00000000,0x00000000,0x00000000,0x00000000,
    0x5e000000,0x000051ff,0x00000000,0x00000000,0x07c2e71f,0x00000000,0x75e36802,0xe3687a69,
    0x00000775,0x02000000,0x002ff7aa,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x0076ff5e,0x00000000,
    0x0051ff84,0x39000000,0x00009cff,0x00000000,0x009cff39,0x00000000,0x00000000,0xff5e0000,
    0x00002ff7,0xe71f0000,0x9dffffff,0x00000029,0x9ccf0400,0xf7aa0200,0x0000002f,0xffffcf04,
    0xffffffff,0x00000076,0x4251ff84,0x99f7ffc8,0x00000007,0x00000000,0x9cff5e00,0x00000000,
    0xff830200,0x9dffffff,0x00000007,0x4ef7ff39,0xe7420000,0x00009cff,0x1f000000,0x0051ffe7,
    0x00000000,0x1f000000,0x0051ffe7,0x00000000,0x26000000,0xcdffffb9,0x1f000775,0xffffffe7,
    0xffffffff,0x002ff7ff,0xffc84302,0x002cc2ff,0x00000000,0x00000000,0xc2ffaa02,0x1f000007,
    0x00009ce7,0x022ff784,0x009cffaa,0xf7cf0400,0xffaa022f,0x02000051,0xffffffaa,0xf7ffffff,
    0x02000054,0x002ff7aa,0x00000000,0x02000000,0x002ff7aa,0x02000000,0x002ff7aa,0xffffcf04,
    0xffffffff,0x000051ff,0xffff8400,0xffffffff,0x02002ff7,0x002ff7aa,0x00000000,0x02000000,
    0xffffffaa,0xffffffff,0x000076ff,0x04000000,0x000ee9cf,0x00000000,0x00000000,0xff840000,
    0x02000051,0xffc8f7aa,0x00002ff7,0x00000000,0x2ff7aa02,0x00000000,0x02000000,0x842ff7aa,
    0x09c25e9c,0x022ff7aa,0x392ff7aa,0x5e002ff7,0x020076ff,0x002ff7aa,0x02000000,0x002ff7aa,
    0x0ee9cf04,0xaa1d0000,0x0207c2ff,0x002ff7aa,0x02000000,0x022ff7aa,0xffffffaa,0xc9ffffff,
    0x0000000e,0xffffe71f,0x002975c9,0x00000000,0x04000000,0x000ee9cf,0x02000000,0x002ff7aa,
    0x84000000,0x000051ff,0xe9cf0400,0xaa02000e,0x04002ff7,0x5e0ee9cf,0x0276c8f7,0x002ff7aa,
    0x1f000000,0x009cffe7,0x00000000,0xcf040000,0x0ee9ffff,0x00000000,0x00000000,0x07c2ff5e,
    0x00000000,0x5e000000,0x000076ff,0x00000000,0xaa020000,0x00002ff7,0x00000000,0x00000000,
    0x07c2ff39,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x22549002,0xaa1d0000,0x000076ff,0x7affff84,0xe7430007,
    0x00002ff7,0xc2ffcf04,0x26000029,0x00000796,0x76ffe71f,0xff430000,0x0007c2ff,0x54f7cf04,
    0xba1d0000,0x000051ff,0x1f000000,0x0007c2e7,0x00000000,0x7affcf04,0xe7430007,0x0007c2ff,
    0x54f7ff84,0xffaa1d00,0x00000076,0x00000000,0x0051ff84,0x00000000,0x00000000,0x07c2e71f,
    0x00000000,0x51ff8400,0xf7ff8300,0x0000002f,0x5e000000,0x000076ff,0x00000000,0x009cff84,
    0x07c2ff84,0x009cff5e,0x54f7ff84,0xffaa1d00,0x00000076,0x76ffe71f,0xe7430000,0x00002ff7,
    0x7affff84,0xe7430007,0x00002ff7,0x76ffcf04,0xff430000,0x0007c2ff,0xff5e0000,0x0029c9c6,
    0x004b4300,0x7affaa02,0x26000007,0x00000e8c,0xaa020000,0x00002ff7,0x00000000,0x0051ff84,
    0xff390000,0x000007c2,0x51ff8400,0x5e000000,0x5e0076ff,0x00009cff,0x00000000,0x0076ff5e,
    0xff390000,0xffaa32f7,0x0000009c,0x76ff8400,0x5e000000,0x00009cff,0x00000000,0xffe71f00,
    0x00000076,0x02000000,0x002ff7aa,0x00000000,0x02000000,0x0007c2aa,0x00000000,0x02000000,
    0x002ff7aa,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x04000000,0x000ee9cf,0x00000000,0x00000000,0x00000000,0x00000000,0xc2840000,0xc2840007,
    0x00000007,0xc9ff5e00,0x0007bd72,0x00000000,0x1d000000,0x004ec9ba,0x00000000,0xffffe71f,
    0x000076ff,0x00000000,0x00000000,0x00000000,0x00000000,0x84000000,0x000051ff,0x00000000,
    0x00000000,0x07c2cf04,0x00000000,0x0029c21f,0x1d00765e,0x00002fb9,0x02000000,0x002ff7aa,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x04000000,0x000ee9cf,0x00000000,0x1d51ff84,0x390ec9cf,0x00009cff,
    0x00000000,0x009cff39,0x00000000,0x00000000,0xffe71f00,0x00000076,0xe71f0000,0xc9ffffff,
    0x00000029,0x0ee95e00,0xf7aa0200,0x0000002f,0x00298c04,0xff831b00,0x00002ff7,0xff99ff84,
    0xffffffff,0x000007c2,0x00000000,0x2ff7cf04,0x00000000,0xffba1d00,0xc9ffffff,0x0000002f,
    0xffffaa02,0x99ffffff,0x00009cff,0x1f000000,0x0051ffe7,0x00000000,0x1f000000,0x0051ffe7,
    0x00000000,0xffe76802,0x00299dff,0x1f000000,0xffffffe7,0xffffffff,0x002ff7ff,0x1d000000,
    0xf7ffe790,0x00000775,0x00000000,0x0ee9ff84,0x39000000,0x1f0076ff,0x00009ce7,0x009cff39,
    0xc2ff3900,0xff5e0007,0x0200009c,0xffffffaa,0xf7ffffff,0x02000071,0x002ff7aa,0x00000000,
    0x02000000,0x002ff7aa,0x02000000,0x002ff7aa,0xffffcf04,0xffffffff,0x000051ff,0xffff8400,
    0xffffffff,0x02002ff7,0x002ff7aa,0xffcf0400,0x022ff7ff,0xffffffaa,0xffffffff,0x000076ff,
    0x04000000,0x000ee9cf,0x00000000,0x00000000,0xff840000,0x02000051,0xc8ffffaa,0x0007c2ff,
    0x00000000,0x2ff7aa02,0x00000000,0x02000000,0x392ff7aa,0x0276c8f7,0x022ff7aa,0x042ff7aa,
    0x5e0076cf,0x020076ff,0x002ff7aa,0x02000000,0x002ff7aa,0xffffcf04,0xffffffff,0x020051f7,
    0x002ff7aa,0x02000000,0x022ff7aa,0xffffffaa,0x29c9ffff,0x00000000,0xffba1d00,0xc9ffffff,
    0x00000029,0x04000000,0x000ee9cf,0x02000000,0x002ff7aa,0x84000000,0x000051ff,0xff840000,
    0xe71f0051,0x02000ee9,0x842ff7aa,0x0bc2849c,0x000ee9cf,0x1f000000,0x009cffe7,0x00000000,
    0x5e000000,0x0076ffff,0x00000000,0x1f000000,0x002ff7e7,0x00000000,0x5e000000,0x000076ff,
    0x00000000,0x39000000,0x00009cff,0x00000000,0x00000000,0x07c2ff39,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x39000000,0x00009cff,0x009cff84,0x5e000000,0x000076ff,0x07c2ff39,0x00000000,
    0x00000000,0x009cff39,0x84000000,0x0007c2ff,0x0076ff39,0x39000000,0x00009cff,0x1f000000,
    0x0007c2e7,0x00000000,0x009cff39,0x5e000000,0x0007c2ff,0x009cff84,0xff390000,0x0000009c,
    0x00000000,0x0051ff84,0x00000000,0x00000000,0x07c2e71f,0x00000000,0x51ff8400,0x2ff7ff83,
    0x00000000,0x5e000000,0x000076ff,0x00000000,0x0076ff84,0x009cff5e,0x009cff39,0x009cff84,
    0xff390000,0x0000009c,0x009cff5e,0x5e000000,0x000076ff,0x009cff84,0x5e000000,0x000076ff,
    0x009cff39,0x84000000,0x0007c2ff,0xff5e0000,0x00002ff7,0x00000000,0x54f7aa02,0x00000000,
    0x00000000,0xaa020000,0x00002ff7,0x00000000,0x0051ff84,0xff390000,0x000007c2,0x9cff3900,
    0xcf040000,0x1f002ff7,0x0207c2e7,0x020ee9aa,0x002ff7aa,0x84000000,0xe9ffffff,0x0000000e,
    0xe9e71f00,0xcf04000e,0x00002ff7,0x00000000,0xc2ffaa02,0x00000007,0x43000000,0x000ee9ff,
    0x00000000,0x02000000,0x0007c2aa,0x00000000,0x00000000,0x077aff84,0x02000000,0xffffc843,
    0x00074ec9,0x002f8102,0x00000000,0x00000000,0x00000000,0x02000000,0x000ee9aa,0x00000000,
    0x00000000,0x00000000,0x00000000,0x9ccf0400,0x76cf0400,0x00000000,0xe7430000,0x9dffffff,
    0x00000029,0xc9901d00,0x0000004e,0x02000000,0x392ff7aa,0x002ff7ff,0x009cff39,0x00000000,
    0x00000000,0x00000000,0xaa020000,0x00002ff7,0x00000000,0x00000000,0x0ee9cf04,0x00000000,
    0x00000000,0x0000765e,0x1f000000,0xffffffe7,0xffffffff,0x0076ffff,0x00000000,0x00000000,
    0x00000000,0xff5e0000,0x9cffffff,0x00000000,0x00000000,0x00000000,0x00000000,0x39000000,
    0x00009cff,0x00000000,0x1d51ff84,0x390ec9cf,0x00009cff,0x00000000,0x009cff39,0x00000000,
    0x00000000,0x9cffe71f,0x00000000,0x00000000,0xe75d0200,0x00002ff7,0x0076e71f,0xf7aa0200,
    0x0000002f,0x00000000,0x84000000,0x000076ff,0x54f7ff84,0xcf1d0000,0x000076ff,0x00000000,
    0x07c2ff39,0x00000000,0x4ef7cf04,0xe7420000,0x00002ff7,0xe7830200,0x3954f7ff,0x00009cff,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x1f000000,0x4ec9ffe7,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xba420000,0x002ff7ff,0x04000000,
    0x002ff7cf,0x5e000000,0x390051ff,0x000076ff,0x009ce71f,0x76ff5e00,0xe71f0000,0x020007c2,
    0x002ff7aa,0xba1d0000,0x020076ff,0x002ff7aa,0x00000000,0x02000000,0x002ff7aa,0x02000000,
    0x002ff7aa,0x0ee9cf04,0x00000000,0x00000000,0x51ff8400,0x00000000,0x02000000,0x002ff7aa,
    0xffcf0400,0x022ff7ff,0x002ff7aa,0x5e000000,0x000076ff,0x04000000,0x000ee9cf,0x00000000,
    0x00000000,0xff840000,0x02000051,0x049cffaa,0x0076ffcf,0x00000000,0x2ff7aa02,0x00000000,
    0x02000000,0x042ff7aa,0x0251ffcf,0x022ff7aa,0x002ff7aa,0x5e0ee984,0x020076ff,0x002ff7aa,
    0x02000000,0x002ff7aa,0xffffcf04,0xc2ffffff,0x02000029,0x002ff7aa,0x02000000,0x022ff7aa,
    0x002ff7aa,0xc2ff8402,0x00000007,0x00000000,0xffe77226,0x00000ee9,0x04000000,0x000ee9cf,
    0x02000000,0x002ff7aa,0x84000000,0x000051ff,0xff5e0000,0xff5e009c,0x0200009c,0xaa54ffaa,
    0x2fe93976,0x0007c2e7,0x84000000,0x2ff7ffff,0x00000000,0x04000000,0x000ee9cf,0x00000000,
    0xaa020000,0x00009cff,0x00000000,0x5e000000,0x000076ff,0x00000000,0x04000000,0x000ee9cf,
    0x00000000,0x00000000,0x07c2ff39,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xc8680200,0xffffffff,0x00009cff,
    0x0076ff84,0x39000000,0x00009cff,0x0076ff5e,0x00000000,0x00000000,0x0076ff5e,0x39000000,
    0x0007c2ff,0xffffff5e,0xffffffff,0x00009cff,0x1f000000,0x0007c2e7,0x00000000,0x0076ff5e,
    0x39000000,0x0007c2ff,0x0051ff84,0xff390000,0x0000009c,0x00000000,0x0051ff84,0x00000000,
    0x00000000,0x07c2e71f,0x00000000,0xcdff8400,0x0051f7ff,0x00000000,0x5e000000,0x000076ff,
    0x00000000,0x0051ff84,0x0076ff5e,0x009cff39,0x0051ff84,0xff390000,0x0000009c,0x0076ff5e,
    0x39000000,0x00009cff,0x0076ff84,0x39000000,0x00009cff,0x0076ff5e,0x39000000,0x0007c2ff,
    0xff5e0000,0x0000009c,0x00000000,0xffff5e00,0x4ec2f7ff,0x00000000,0xaa020000,0x00002ff7,
    0x00000000,0x0051ff84,0xff390000,0x000007c2,0xe9cf0400,0xff39000e,0x040007c2,0x1f2ff7cf,
    0x042ff7e7,0x000ee9cf,0x02000000,0x2ff7ffaa,0x00000000,0xffaa0200,0xff390051,0x000007c2,
    0x00000000,0x0ee9ff5e,0x00000000,0xffffaa02,0x000051f7,0x00000000,0x02000000,0x0007c2aa,
    0x00000000,0x00000000,0xffffba1d,0x1f002ff7,0xffffffe7,0xffffffff,0x002ff7ff,0x00000000,
    0x00000000,0x00000000,0x02000000,0x0007c2aa,0x00000000,0x00000000,0x00000000,0xcf040000,
    0xffffffff,0xffffffff,0x0007c2ff,0x00000000,0xe772c21f,0x02002ff7,0x0054cd83,0xffba1f00,
    0x390054f7,0x00009cff,0x07c2ff84,0x009cff39,0x00000000,0x00000000,0x00000000,0xaa020000,
    0x00002ff7,0x00000000,0x00000000,0x0ee9cf04,0x00000000,0x00000000,0x0000765e,0x1f000000,
    0xffffffe7,0xffffffff,0x0076ffff,0x00000000,0x00000000,0x00000000,0xff5e0000,0x9cffffff,
    0x00000000,0x00000000,0x00000000,0x00000000,0xaa020000,0x00002ff7,0x00000000,0x0076ff84,
    0x39000000,0x00009cff,0x00000000,0x009cff39,0x00000000,0x1d000000,0x079cffcf,0x00000000,
    0x00000000,0x5e000000,0x000076ff,0x000ee984,0xf7aa0200,0x0000002f,0x00000000,0x39000000,
    0x00009cff,0x0076ff84,0x39000000,0x00009cff,0x00000000,0x0076ff84,0x00000000,0x0076ff5e,
    0x39000000,0x00009cff,0x00000000,0x5e000000,0x00009cff,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x1f000000,0x4ec9ffe7,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0xb9420000,0x002ff7ff,0x1f000000,0x0007c2e7,0x5e000000,0x390051ff,
    0x000076ff,0x009ccf04,0x2ff7aa02,0xaa020000,0x02002ff7,0x002ff7aa,0x04000000,0x000ee9cf,
    0x0051ff84,0x00000000,0x02000000,0x002ff7aa,0x04000000,0x000ee9cf,0x0ee9cf04,0x00000000,
    0x00000000,0x51ff8400,0x00000000,0x00000000,0x0051ff84,0x02000000,0x022ff7aa,0x002ff7aa,
    0x5e000000,0x000076ff,0x04000000,0x000ee9cf,0x00000000,0x00000000,0xff840000,0x02000051,
    0x002ff7aa,0x2ff7ff39,0x00000000,0x2ff7aa02,0x00000000,0x02000000,0x002ff7aa,0x020ee984,
    0x022ff7aa,0x002ff7aa,0x5e51e71f,0x020076ff,0x002ff7aa,0x04000000,0x000ee9cf,0x0ee9cf04,
    0x00000000,0x02000000,0x002ff7aa,0x04000000,0x020ee9cf,0x002ff7aa,0xffaa0200,0x00000076,
    0x00000000,0xaa020000,0x000051ff,0x04000000,0x000ee9cf,0x02000000,0x002ff7aa,0x84000000,
    0x000051ff,0xe71f0000,0xff8407c2,0x00000051,0xe77dff84,0x72e31f51,0x00009cff,0xff390000,
    0xc2ff73e9,0x00000007,0x04000000,0x000ee9cf,0x00000000,0xff390000,0x00000ee9,0x00000000,
    0x5e000000,0x000076ff,0x00000000,0x00000000,0x0076ff5e,0x00000000,0x00000000,0x07c2ff39,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0xffffcf04,0xffffffff,0x0007c2ff,0x0051ff84,0x39000000,0x00009cff,
    0x0051ff84,0x00000000,0x00000000,0x0051ff84,0x39000000,0x0007c2ff,0xffffff84,0xffffffff,
    0x0007c2ff,0x1f000000,0x0007c2e7,0x00000000,0x0051ff84,0x39000000,0x0007c2ff,0x0051ff84,
    0xff390000,0x000007c2,0x00000000,0x0051ff84,0x00000000,0x00000000,0x07c2e71f,0x00000000,
    0xffff8400,0x07c2ffff,0x00000000,0x5e000000,0x000076ff,0x00000000,0x0051ff84,0x0076ff5e,
    0x07c2ff39,0x0051ff84,0xff390000,0x000007c2,0x0051ff84,0x39000000,0x00009cff,0x0051ff84,
    0x39000000,0x00009cff,0x0051ff84,0x39000000,0x0007c2ff,0xff5e0000,0x00000076,0x00000000,
    0xc8430000,0xffffffff,0x00000076,0xaa020000,0x00002ff7,0x00000000,0x0051ff84,0xff390000,
    0x000007c2,0xff840000,0xff840051,0x00000076,0x5e51ff84,0x3976aac2,0x0007c2ff,0x00000000,
    0x07c2ff5e,0x00000000,0xff390000,0xffaa09c2,0x00000051,0x39000000,0x0051ffff,0x00000000,
    0xffffaa02,0x000051f7,0x00000000,0x02000000,0x0007c2aa,0x00000000,0x00000000,0xffffba1d,
    0x1f002ff7,0x00002292,0xffff9026,0x000775f7,0x00000000,0x00000000,0x00000000,0x02000000,
    0x0007c2aa,0x00000000,0x00000000,0x00000000,0xcf040000,0xffffffff,0xffffffff,0x0007c2ff,
    0x00000000,0x3907bd1f,0x00009cff,0x0000001b,0x079ce71f,0x5e51ff5e,0x000076ff,0x9cffaa02,
    0x0051ff5e,0x00000000,0x00000000,0x00000000,0x84000000,0x000051ff,0x00000000,0x00000000,
    0x07c2cf04,0x00000000,0x00000000,0x00000000,0x00000000,0x02000000,0x002ff7aa,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0xff390000,0x0000009c,0x00000000,0x009cff5e,0x5e000000,0x000076ff,0x00000000,
    0x009cff39,0x00000000,0xcf1d0000,0x000799ff,0x00000000,0x00000000,0x39000000,0x04009cff,
    0xffffffcf,0xffffffff,0x000ee9ff,0x00000000,0x39000000,0x00009cff,0x0051ff5e,0x39000000,
    0x00009cff,0x04000000,0x000ee9cf,0x00000000,0x0051ff84,0x39000000,0x00009cff,0x00000000,
    0xaa020000,0x000076ff,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0xffe76802,0x00299dff,0x1f000000,0xffffffe7,0xffffffff,0x002ff7ff,0x1d000000,0xf7ffe790,
    0x00000775,0x1f000000,0x0007c2e7,0x5e000000,0x390051ff,0x000076ff,0x009ce71f,0xffffe71f,
    0xffffffff,0x020076ff,0x002ff7aa,0x02000000,0x002ff7aa,0x0076ff5e,0x00000000,0x02000000,
    0x002ff7aa,0x39000000,0x0007c2ff,0x0ee9cf04,0x00000000,0x00000000,0x51ff8400,0x00000000,
    0x00000000,0x0076ff5e,0x02000000,0x022ff7aa,0x002ff7aa,0x5e000000,0x000076ff,0x04000000,
    0x000ee9cf,0x00000000,0x00000000,0xff840000,0x02000051,0x002ff7aa,0xc2ff8400,0x00000007,
    0x2ff7aa02,0x00000000,0x02000000,0x002ff7aa,0x02000000,0x022ff7aa,0x002ff7aa,0x5e9caa02,
    0x000076ff,0x0051ff84,0x1f000000,0x0007c2e7,0x0ee9cf04,0x00000000,0x00000000,0x0051ff84,
    0x1f000000,0x0207c2e7,0x002ff7aa,0xff390000,0x000007c2,0x00000000,0x5e000000,0x000076ff,
    0x04000000,0x000ee9cf,0x02000000,0x002ff7aa,0x84000000,0x000051ff,0xaa020000,0xe9cf34f7,
    0x0000000e,0xe9c6ff5e,0xc6cf040e,0x000076ff,0xffaa0200,0xffaa0276,0x00000076,0x04000000,
    0x000ee9cf,0x00000000,0xffcf0400,0x00000051,0x00000000,0x5e000000,0x000076ff,0x00000000,
    0x00000000,0x0ee9cf04,0x00000000,0x00000000,0x07c2ff39,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x2cc9ff5e,
    0x39000000,0x0007c2ff,0x0076ff84,0x39000000,0x00009cff,0x0076ff5e,0x00000000,0x00000000,
    0x0076ff5e,0x39000000,0x0007c2ff,0x0051ff5e,0x00000000,0x00000000,0x1f000000,0x0007c2e7,
    0x00000000,0x0076ff5e,0x39000000,0x0007c2ff,0x0051ff84,0xff390000,0x000007c2,0x00000000,
    0x0051ff84,0x00000000,0x00000000,0x07c2e71f,0x00000000,0xf7ff8400,0x76ffcf51,0x00000000,
    0x5e000000,0x000076ff,0x00000000,0x0051ff84,0x0076ff5e,0x07c2ff39,0x0051ff84,0xff390000,
    0x000007c2,0x0076ff5e,0x39000000,0x00009cff,0x0076ff84,0x39000000,0x00009cff,0x0076ff5e,
    0x39000000,0x0007c2ff,0xff5e0000,0x00000076,0x00000000,0x00000000,0xff831b00,0x00000ee9,
    0xaa020000,0x00002ff7,0x00000000,0x0051ff84,0xff390000,0x000007c2,0xff390000,0xf7cf0bc2,
    0x0000002f,0x8476ff5e,0x5e9c5e76,0x000076ff,0x39000000,0x76ffffff,0x00000000,0xcf040000,
    0xe9e753f7,0x0000000e,0xcf040000,0x000076ff,0x00000000,0x43000000,0x000ee9ff,0x00000000,
    0x02000000,0x0007c2aa,0x00000000,0x00000000,0x079cff84,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x0ee98400,0x0ee98400,0x00000000,0x00000000,0x3907bd1f,0x00009cff,
    0x00000000,0x0051ff5e,0x399ce71f,0x0007c2ff,0xffe71f00,0x000099ff,0x00000000,0x00000000,
    0x00000000,0x5e000000,0x000051ff,0x00000000,0x00000000,0x07c2e71f,0x00000000,0x00000000,
    0x00000000,0x00000000,0x02000000,0x002ff7aa,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xf7aa0200,0x0000002f,
    0x00000000,0x0ee9e71f,0xaa020000,0x000051ff,0x00000000,0x009cff39,0x00000000,0xffcf0400,
    0x00000076,0x00000000,0x00000000,0x5e000000,0x04009cff,0xffffffcf,0xffffffff,0x000ee9ff,
    0x00000000,0x84000000,0x000076ff,0x0076e71f,0x39000000,0x00009cff,0x5e000000,0x00009cff,
    0x00000000,0x0076ff84,0x39000000,0x00009cff,0x00000000,0xff390000,0x00002ff7,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x26000000,0xcdffffb9,0x1f000775,
    0xffffffe7,0xffffffff,0x002ff7ff,0xffc84302,0x002cc2ff,0x00000000,0x1f000000,0x0007c2e7,
    0x39000000,0x1f0076ff,0x00009ce7,0x009cff39,0xffffff5e,0xffffffff,0x0207c2ff,0x002ff7aa,
    0x04000000,0x002ff7cf,0x0ee9e71f,0x00000000,0x02000000,0x002ff7aa,0x84000000,0x000076ff,
    0x0ee9cf04,0x00000000,0x00000000,0x51ff8400,0x00000000,0x00000000,0x0ee9e71f,0x02000000,
    0x022ff7aa,0x002ff7aa,0x5e000000,0x000076ff,0x04000000,0x000ee9cf,0x00000000,0x00000000,
    0xffaa0200,0x02000051,0x002ff7aa,0xffcf0400,0x00000076,0x2ff7aa02,0x00000000,0x02000000,
    0x002ff7aa,0x02000000,0x022ff7aa,0x002ff7aa,0x9bf75e00,0x000076ff,0x009cff39,0x5e000000,
    0x00009cff,0x0ee9cf04,0x00000000,0x00000000,0x009cff39,0x5e000000,0x02009cff,0x002ff7aa,
    0xaa020000,0x000051ff,0x00000000,0x84000000,0x000076ff,0x04000000,0x000ee9cf,0x00000000,
    0x002ff784,0xaa020000,0x00002ff7,0x84000000,0xc2ffc6ff,0x00000007,0xc2ffff39,0xffaa0207,
    0x000051ff,0xc2ff5e00,0xff390007,0x00000ee9,0x04000000,0x000ee9cf,0x00000000,0x9cff8400,
    0x00000000,0x00000000,0x5e000000,0x000076ff,0x00000000,0x00000000,0x76ff5e00,0x00000000,
    0x00000000,0x07c2ff39,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x0051ff84,0x5e000000,0x0007c2ff,0x009cff84,
    0x5e000000,0x000076ff,0x07c2ff39,0x00000000,0x00000000,0x009cff39,0x84000000,0x0007c2ff,
    0x009cff39,0x00000000,0x00000000,0x1f000000,0x0007c2e7,0x00000000,0x009cff39,0x84000000,
    0x0007c2ff,0x0051ff84,0xff390000,0x000007c2,0x00000000,0x0051ff84,0x00000000,0x00000000,
    0x07c2e71f,0x00000000,0x51ff8400,0xf7ff3900,0x0000002f,0x5e000000,0x000076ff,0x00000000,
    0x0051ff84,0x0076ff5e,0x07c2ff39,0x0051ff84,0xff390000,0x000007c2,0x009cff5e,0x5e000000,
    0x000076ff,0x009cff84,0x5e000000,0x000076ff,0x009cff39,0x84000000,0x0007c2ff,0xff5e0000,
    0x00000076,0x00000000,0x00000000,0xcf040000,0x00000ee9,0xaa020000,0x00002ff7,0x00000000,
    0x0076ff5e,0xff5e0000,0x000007c2,0xcf040000,0xc2ff72f7,0x00000007,0xcdc9ff39,0x9cdc1f2f,
    0x000051ff,0xcf040000,0xffe7a1ff,0x00000051,0x5e000000,0x9cffffff,0x00000000,0xff840000,
    0x000007c2,0x00000000,0x02000000,0x002ff7aa,0x00000000,0x02000000,0x0007c2aa,0x00000000,
    0x04000000,0x002ff7cf,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x009caa02,
    0x009caa02,0x00000000,0x002cb61f,0xaa09bd1f,0x00009cff,0x00000000,0x0051ff5e,0x049ce71f,
    0x29c9ffcf,0xff5e0000,0x00002ff7,0x00000000,0x00000000,0x00000000,0x39000000,0x000076ff,
    0x00000000,0x00000000,0x0076ff39,0x00000000,0x00000000,0x00000000,0x00000000,0x02000000,
    0x002ff7aa,0x00000000,0x1f000000,0x0051ffe7,0x00000000,0x00000000,0x00000000,0x00000000,
    0x1f000000,0x0051ffe7,0x00000000,0x9cff3900,0x00000000,0x00000000,0x9cffaa02,0xff690207,
    0x000007c2,0x00000000,0x009cff39,0x00000000,0x54f7cf04,0x00000000,0x00000000,0x00227583,
    0xe7430200,0x000051ff,0x00000000,0xf7aa0200,0x0000002f,0x00227583,0xff830200,0x00002ff7,
    0x54f7aa02,0xe7420000,0x000051ff,0xaa020000,0x000051ff,0x00000000,0x4ef7ff39,0xe7420000,
    0x000076ff,0x004e6800,0xffe74200,0x0000009c,0x1f000000,0x0051ffe7,0x00000000,0x1f000000,
    0x0051ffe7,0x00000000,0x00000000,0xe7680200,0x002ff7ff,0x00000000,0x00000000,0x1f000000,
    0x75f7ffe7,0x00000007,0x00000000,0x00000000,0x00000000,0x1f000000,0x00009ce7,0x022ff784,
    0x029cffaa,0x0051ffaa,0x04000000,0x020ee9cf,0x002ff7aa,0xaa1d0000,0x0007c2ff,0xc9ff8400,
    0x1b000029,0x02004b83,0x002ff7aa,0xffba2600,0x00000ee9,0x0ee9cf04,0x00000000,0x00000000,
    0x51ff8400,0x00000000,0x00000000,0xc9ff8400,0x1f000029,0x022ff7cf,0x002ff7aa,0x5e000000,
    0x000076ff,0x04000000,0x000ee9cf,0x02000000,0x00074e8e,0xf7ff4300,0x0200002f,0x002ff7aa,
    0xff390000,0x00002ff7,0x2ff7aa02,0x00000000,0x02000000,0x002ff7aa,0x02000000,0x022ff7aa,
    0x002ff7aa,0xffe71f00,0x000076ff,0x7affcf04,0xe7420007,0x000051ff,0x0ee9cf04,0x00000000,
    0x00000000,0x7affcf04,0xe7420007,0x02002ff7,0x002ff7aa,0x5e000000,0x00009cff,0x00247583,
    0xff690200,0x00002ff7,0x04000000,0x000ee9cf,0x00000000,0x29c9ff5e,0xff690200,0x00000ee9,
    0x39000000,0x76ffffff,0x00000000,0x9cffe71f,0xff5e0000,0x00002ff7,0x51ffcf04,0x84000000,
    0x00009cff,0x04000000,0x000ee9cf,0x00000000,0x2ff7ff39,0x00000000,0x00000000,0x5e000000,
    0x000076ff,0x00000000,0x00000000,0xe9cf0400,0x0000000e,0x00000000,0x07c2ff39,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x29c2ff5e,0xe75d0200,0x0007c2ff,0x7affff84,0xe7430007,0x00002ff7,0xc2ffcf04,
    0x26000029,0x00000796,0x76ffcf04,0xff430000,0x0007c2ff,0x99ffcf04,0x26000007,0x00005190,
    0x1f000000,0x0007c2e7,0x00000000,0x7affcf04,0xff430007,0x0007c2ff,0x0051ff84,0xff390000,
    0x000007c2,0x00000000,0x0051ff84,0x00000000,0x00000000,0x07c2e71f,0x00000000,0x51ff8400,
    0xff5e0000,0x000007c2,0x39000000,0x0029e9ff,0x00000000,0x0051ff84,0x0076ff5e,0x07c2ff39,
    0x0051ff84,0xff390000,0x000007c2,0x76ffe71f,0xff430000,0x00002ff7,0x7affff84,0xe7430007,
    0x00002ff7,0x76ffe71f,0xff430000,0x0007c2ff,0xff5e0000,0x00000076,0x00000000,0x074eb604,
    0xff690200,0x00000ee9,0x84000000,0x000799ff,0x00000000,0x29e9ff39,0xffe74200,0x000007c2,
    0x84000000,0x76ffffff,0x00000000,0xe9ffcf04,0xffaa020e,0x00000ee9,0xffaa0200,0xff5e009c,
    0x00000ee9,0x1f000000,0x2ff7ffe7,0x00000000,0xf7ff3900,0x0000002f,0x00000000,0x02000000,
    0x002ff7aa,0x00000000,0x02000000,0x0007c2aa,0x00000000,0x04000000,0x000ee9cf,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x04000000,0x000ee9cf,
    0x00000000,0x00000000,0x00000000,0x00000000,0x0076e71f,0x0051e71f,0x00000000,0xffffe71f,
    0xffffffff,0x00000ee9,0x00000000,0x079ce71f,0x0051ff5e,0xffffe739,0x9ce9ffff,0x0007c2ff,
    0x00000000,0x00000000,0x00000000,0x04000000,0x0007c2cf,0x00000000,0x00000000,0x002ff784,
    0x00000000,0x00000000,0x00000000,0x00000000,0x02000000,0x002ff7aa,0x00000000,0x1f000000,
    0x0051ffe7,0x00000000,0x00000000,0x00000000,0x00000000,0x1f000000,0x0051ffe7,0x00000000,
    0x2ff7aa02,0x00000000,0x00000000,0xffe71f00,0xffffffff,0x00000051,0xffff3900,0xffffffff,
    0x0007c2ff,0xffffff5e,0xffffffff,0x000051ff,0xffffff84,0xffffffff,0x0000009c,0x00000000,
    0xf7aa0200,0x0000002f,0xffffff84,0xffffffff,0x00000076,0xffff3900,0xffffffff,0x000007c2,
    0xe71f0000,0x00000ee9,0x00000000,0xffffaa02,0xffffffff,0x000007c2,0xffff8400,0xc9ffffff,
    0x0000000e,0x1f000000,0x0051ffe7,0x00000000,0x1f000000,0x0051ffe7,0x00000000,0x00000000,
    0x00000000,0x002fb626,0x00000000,0x00000000,0x1f000000,0x00004ec2,0x00000000,0x00000000,
    0x39000000,0x00009cff,0x02000000,0x000ee9aa,0xf7ff9002,0x049ce799,0x000ee9cf,0x00000000,
    0x0251ff84,0xffffffaa,0xffffffff,0x00002ff7,0xffaa0200,0xffffffff,0x020051ff,0xffffffaa,
    0xf7ffffff,0x0000002f,0xffffcf04,0xffffffff,0x0007c2ff,0x51ff8400,0x00000000,0x00000000,
    0xffaa0200,0xffffffff,0x0207c2ff,0x002ff7aa,0x5e000000,0x000076ff,0xffffcf04,0xffffffff,
    0x02000ee9,0xffffffaa,0x9cffffff,0x02000000,0x002ff7aa,0x84000000,0x0007c2ff,0xffffaa02,
    0xffffffff,0x022ff7ff,0x002ff7aa,0x02000000,0x022ff7aa,0x002ff7aa,0xff840000,0x000076ff,
    0xffff3900,0xffffffff,0x00000099,0x0ee9cf04,0x00000000,0x00000000,0xffff3900,0xffffffff,
    0x02000099,0x002ff7aa,0x04000000,0x002ff7cf,0xffffff84,0xffffffff,0x00000099,0x04000000,
    0x000ee9cf,0x00000000,0xffffaa02,0xffffffff,0x00000051,0x04000000,0x2ff7ffcf,0x00000000,
    0x51ffcf04,0xff390000,0x00002ff7,0x009cff84,0x04000000,0x0051ffcf,0x04000000,0x000ee9cf,
    0x02000000,0xffffffaa,0xffffffff,0x002ff7ff,0x5e000000,0x000076ff,0x00000000,0x00000000,
    0xff5e0000,0x00000076,0x00000000,0x07c2ff39,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xffffe71f,0x99ffffff,
    0x0007c2ff,0xff99ff84,0xffffffff,0x00000099,0xffe71f00,0xffffffff,0x000007c2,0xffff5e00,
    0xc6ffffff,0x0007c2ff,0xffe73900,0xffffffff,0x000051ff,0x1f000000,0x0007c2e7,0x00000000,
    0xffff5e00,0x99ffffff,0x0007c2ff,0x0051ff84,0xff390000,0x000007c2,0xffffff39,0xffffffff,
    0x0007c2ff,0x00000000,0x07c2e71f,0x00000000,0x51ff8400,0xaa020000,0x00009cff,0x04000000,
    0xffffffcf,0x000051ff,0x0051ff84,0x0076ff5e,0x07c2ff39,0x0051ff84,0xff390000,0x000007c2,
    0xffff5e00,0xffffffff,0x0000009c,0xff99ff84,0xffffffff,0x0000009c,0xffff5e00,0xc6ffffff,
    0x0007c2ff,0xff5e0000,0x00000076,0x00000000,0xffffcf04,0xffffffff,0x00000076,0x39000000,
    0xffffffff,0x000051ff,0xffffcf04,0xff99ffff,0x000007c2,0x39000000,0x2ff7ffff,0x00000000,
    0x9cffaa02,0xff840000,0x000007c2,0xe9ff5e00,0x8400000e,0x0007c2ff,0x00000000,0x07c2ff84,
    0x00000000,0xffffcf04,0xffffffff,0x00002ff7,0x02000000,0x002ff7aa,0x00000000,0x02000000,
    0x0007c2aa,0x00000000,0x04000000,0x000ee9cf,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x04000000,0x000ee9cf,0x00000000,0x00000000,0x00000000,
    0x00000000,0x002ff739,0x002ff739,0x00000000,0xc8902600,0x9df7ffff,0x00000029,0x00000000,
    0xffba1f00,0x000054f7,0xffb91d00,0x0229c9ff,0x0076ffaa,0x00000000,0x00000000,0x00000000,
    0x00000000,0x002ff784,0x00000000,0x04000000,0x0007c2cf,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x1f000000,0x002ff7e7,0x00000000,0x00000000,
    0x00000000,0x00000000,0x1f000000,0x0051ffe7,0x00000000,0x009cff39,0x00000000,0x00000000,
    0xba1d0000,0x2fc9ffff,0x00000000,0xffff3900,0xffffffff,0x0007c2ff,0xffffff5e,0xffffffff,
    0x000051ff,0xffb96802,0x4ec2ffff,0x00000000,0x00000000,0xf7aa0200,0x0000002f,0xffc8681b,
    0x29c2ffff,0x00000000,0xb91f0000,0x99f7ffff,0x00000007,0xff840000,0x00000076,0x00000000,
    0xc8680200,0x75f7ffff,0x00000007,0xff901d00,0x0799f7ff,0x00000000,0x1f000000,0x0051ffe7,
    0x00000000,0x1f000000,0x002ff7e7,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x39000000,0x00009cff,0x00000000,
    0x0076ff39,0x00000000,0x39000000,0x00009cff,0x00000000,0x029cff5e,0xffffffaa,0x9dcdffff,
    0x00000029,0x68020000,0xcdffffc8,0x02000754,0xffffffaa,0x0754c6ff,0x00000000,0xffffcf04,
    0xffffffff,0x0007c2ff,0x51ff8400,0x00000000,0x00000000,0x68020000,0xcdffffc8,0x02000054,
    0x002ff7aa,0x5e000000,0x000076ff,0xffffcf04,0xffffffff,0x00000ee9,0xffe7901d,0x0775cdff,
    0x02000000,0x002ff7aa,0x04000000,0x0076ffcf,0xffffaa02,0xffffffff,0x022ff7ff,0x002ff7aa,
    0x02000000,0x022ff7aa,0x002ff7aa,0xff390000,0x000076ff,0xba420000,0x54cdffff,0x00000000,
    0x0ee9cf04,0x00000000,0x00000000,0xba420000,0x9cffffff,0x02000000,0x002ff7aa,0x00000000,
    0x009cff5e,0xffc66802,0x4ec2ffff,0x00000000,0x04000000,0x000ee9cf,0x00000000,0xe7830200,
    0x29c2ffff,0x00000000,0x02000000,0x0ee9ffaa,0x00000000,0x2ff7aa02,0xe71f0000,0x1f000ee9,
    0x002ff7e7,0x00000000,0x07c2ff5e,0x04000000,0x000ee9cf,0x02000000,0xffffffaa,0xffffffff,
    0x002ff7ff,0x5e000000,0x000076ff,0x00000000,0x00000000,0xcf040000,0x00000ee9,0x00000000,
    0x07c2ff39,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0xffba1d00,0x392fc9ff,0x0007c2ff,0x4351ff84,0x71f7ffe7,
    0x00000000,0x901d0000,0xc2ffffe7,0x00000029,0xc8430000,0x3971f7ff,0x0007c2ff,0x901d0000,
    0xc2ffffff,0x0000004e,0x1f000000,0x0007c2e7,0x00000000,0xe7430000,0x3971f7ff,0x00009cff,
    0x0051ff84,0xff390000,0x000007c2,0xffffff39,0xffffffff,0x0007c2ff,0x00000000,0x07c2e71f,
    0x00000000,0x51ff8400,0x1f000000,0x0051ffe7,0x00000000,0xffffa91d,0x000051ff,0x0051ff84,
    0x0076ff5e,0x07c2ff39,0x0051ff84,0xff390000,0x000007c2,0xc8430000,0x54cdffff,0x00000000,
    0x4351ff84,0x71f7ffe7,0x00000000,0xe7430000,0x3971f7ff,0x0007c2ff,0xff5e0000,0x00000076,
    0x00000000,0xe7901d00,0x54cdffff,0x00000000,0x00000000,0xffffc85d,0x000051ff,0xffba1f00,
    0xff3954f7,0x000007c2,0x04000000,0x009cffcf,0x00000000,0x51ff5e00,0xff390000,0x0000009c,
    0x2ff7ff39,0x04000000,0x0076ffcf,0x00000000,0x0076ff84,0x00000000,0xffffcf04,0xffffffff,
    0x00002ff7,0x02000000,0x002ff7aa,0x00000000,0x02000000,0x0007c2aa,0x00000000,0x04000000,
    0x000ee9cf,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x0007bd1f,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x0076e71f,0x00000000,
    0x39000000,0x000076ff,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x5e000000,0x00009cff,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x02000000,0x002ff7aa,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x5e000000,0x00009cff,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x2ff78400,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0xffcf0400,0x00000051,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x5e000000,0x000076ff,
    0x00000000,0x00000000,0x5e000000,0x000076ff,0x00000000,0x07c2ff39,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x39000000,0x00009cff,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x07c2e71f,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x0051ff84,0x00000000,0x00000000,
    0x00000000,0x39000000,0x0007c2ff,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x04000000,0x002ff7cf,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x0076ff84,
    0x00000000,0x02000000,0x0007c2aa,0x00000000,0x43000000,0x000ee9e7,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x0007bd1f,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x0ee98400,0x00000000,0x84000000,0x000007c2,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x84000000,0x00002ff7,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x84000000,0x00002ff7,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0xf7830200,0x00000775,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff390000,0x00002ff7,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x5e000000,0xc2ffffff,0x00000007,0x00000000,0x00000000,
    0x00000000,0xff840000,0x07c2ffff,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x22993700,
    0xe7420000,0x000051ff,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x02000000,0x009cff84,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x0051ff84,0x00000000,0x00000000,0x00000000,0x39000000,0x0007c2ff,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x84020000,0x00009cff,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0xffffff5e,0x00000ee9,0x02000000,0x0007c2aa,
    0x00000000,0xffffaa02,0x00009cff,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x0007bd1f,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x51e71f00,0x00000000,0xe71f0000,0x00000051,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0xcf040000,0x0000009c,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0xcf040000,0x0000009c,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x26000000,
    0xffffe7b9,0x000007c2,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x5e000000,0x00000076,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x5e000000,0xc2ffffff,0x00000007,0x00000000,0x00000000,0x00000000,0xff840000,0x07c2ffff,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0xffff3900,0xffffffff,0x0000009c,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xffffe71f,0x002ff7ff,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x0051ff84,
    0x00000000,0x00000000,0x00000000,0x39000000,0x0007c2ff,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0xffffaa02,0x000051ff,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0xffc85d00,0x00000ee9,0x02000000,0x0007c2aa,0x00000000,0xf7ffaa02,0x0000079d,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0xcf040000,0xffffffff,0xffffffff,0x00000ee9,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0xc8430200,0x75cdffff,0x00000007,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0xffffe71f,0x00004ecd,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x0051ff84,0x00000000,0x00000000,0x00000000,
    0x39000000,0x0007c2ff,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xf7ffaa02,
    0x00000054,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x02000000,0x0007c2aa,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xcf040000,0xffffffff,0xffffffff,
    0x00000ee9,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x02000000,0x0007c2aa,0x00000000,
    0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000
};


typedef struct dbgstr_obj_t
{
    unsigned int     s_fontTexID;
    int              s_wndW, s_wndH;
    GLuint           s_progShader;
    int              locVtx, locUv, locTranslate, locSampler0;
    int              locPrjMul, locPrjAdd;
    int              locColFG, locColBG;
} dbgstr_obj_t;

static dbgstr_obj_t s_dbgstr;

static int
dbgstr_load_debug_font_texture (void)
{
    _glGenTextures (1, &s_dbgstr.s_fontTexID);
    _glBindTexture (GL_TEXTURE_2D, s_dbgstr.s_fontTexID);
    _glTexParameterf (GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR      );
    _glTexParameterf (GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR      );
    _glTexParameterf (GL_TEXTURE_2D, GL_TEXTURE_WRAP_S,     GL_CLAMP_TO_EDGE);
    _glTexParameterf (GL_TEXTURE_2D, GL_TEXTURE_WRAP_T,     GL_CLAMP_TO_EDGE);

    _glPixelStorei (GL_UNPACK_ALIGNMENT, 4);

    _glTexImage2D (GL_TEXTURE_2D, 0, GL_LUMINANCE, 
                      DBGSTR_IMAGE_WIDTH, DBGSTR_IMAGE_HEIGHT,
                      0, GL_LUMINANCE, 
                      GL_UNSIGNED_BYTE,
                      s_font12x22);
    return 0;
}


static int
dbgstr_setup_shader() 
{
    GLuint s_progShader;
    s_progShader = build_shader (s_strDbgStrVS, s_strDbgStrFS);

    s_dbgstr.locVtx = _glGetAttribLocation (s_progShader, "a_Vertex");
    s_dbgstr.locUv  = _glGetAttribLocation (s_progShader, "a_UV"    );

    s_dbgstr.locSampler0  = _glGetUniformLocation (s_progShader, "u_Sampler0" );
    s_dbgstr.locTranslate = _glGetUniformLocation (s_progShader, "u_Translate");
    s_dbgstr.locPrjMul    = _glGetUniformLocation (s_progShader, "u_PrjMul");
    s_dbgstr.locPrjAdd    = _glGetUniformLocation (s_progShader, "u_PrjAdd");
    s_dbgstr.locColFG     = _glGetUniformLocation (s_progShader, "u_ColorFG" );
    s_dbgstr.locColBG     = _glGetUniformLocation (s_progShader, "u_ColorBG" );

    s_dbgstr.s_progShader = s_progShader;
    return 0;
}




void
init_dbgstr (int win_w, int win_h)
{
    s_dbgstr.s_wndW = win_w;
    s_dbgstr.s_wndH = win_h;

    dbgstr_load_debug_font_texture ();
    dbgstr_setup_shader();
}


int
draw_dbgstr_ex (char *str, int x, int y, float scale, float *col_fg, float *col_bg)
{
    int   i, row, column;
    float u0, u1;
    float vertices[8], texcoord[8];
    float fW = DEBSTR_FONT_WIDTH  * scale;
    float fH = DEBSTR_FONT_HEIGHT * scale;
    float fx = (float)x;
    float fy = (float)y;

    int s_wndW       = s_dbgstr.s_wndW;
    int s_wndH       = s_dbgstr.s_wndH;
    int locVtx       = s_dbgstr.locVtx;
    int locUv        = s_dbgstr.locUv;
    int locTranslate = s_dbgstr.locTranslate;
    int locSampler0  = s_dbgstr.locSampler0;
    int locPrjMul    = s_dbgstr.locPrjMul;
    int locPrjAdd    = s_dbgstr.locPrjAdd;
    int locColFG     = s_dbgstr.locColFG;
    int locColBG     = s_dbgstr.locColBG;
    unsigned int s_fontTexID = s_dbgstr.s_fontTexID;
    
    vertices[ 2 * 0 + 0 ] = fx;      vertices[ 2 * 0 + 1 ] = fy;
    vertices[ 2 * 1 + 0 ] = fx;      vertices[ 2 * 1 + 1 ] = fy + fH;
    vertices[ 2 * 2 + 0 ] = fx + fW; vertices[ 2 * 2 + 1 ] = fy;
    vertices[ 2 * 3 + 0 ] = fx + fW; vertices[ 2 * 3 + 1 ] = fy + fH;
    _glUseProgram (s_dbgstr.s_progShader);
    GLASSERT();

    _glBindBuffer (GL_ARRAY_BUFFER, 0);
    _glBindBuffer (GL_ELEMENT_ARRAY_BUFFER, 0);
    GLASSERT();

    _glEnableVertexAttribArray (locVtx);
    _glEnableVertexAttribArray (locUv );
    _glVertexAttribPointer (locVtx, 2, GL_FLOAT, GL_FALSE, 0, vertices);
    _glVertexAttribPointer (locUv,  2, GL_FLOAT, GL_FALSE, 0, texcoord);
    GLASSERT();

    _glUniform1i (locSampler0, 0);
    _glUniform4f (locPrjMul, 2.0f / s_wndW, -2.0f / s_wndH, 0.0f, 0.0f);
    _glUniform4f (locPrjAdd, -1.0f, 1.0f, 1.0f, 1.0f);
    _glUniform4fv(locColFG, 1, col_fg);
    _glUniform4fv(locColBG, 1, col_bg);
    GLASSERT();

    _glDisable (GL_DEPTH_TEST);
    _glDisable (GL_CULL_FACE );
    _glActiveTexture (GL_TEXTURE0);
    _glBindTexture   (GL_TEXTURE_2D, s_fontTexID);
    GLASSERT();

    _glEnable (GL_BLEND);
    _glBlendFuncSeparate (GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA, 
    	       GL_ONE, GL_ONE_MINUS_SRC_ALPHA);
    GLASSERT();

    
    row = column = 0;
    for (i = 0; ; i ++)
    {
        int c = str[i];

        if ( c == 0 )
            break;

        if (c == '\n')
        {
            row ++;
            column = 0;
            continue;
        }

        u0 = (c - 0x20) * (1.0f / DEBSTR_FONT_NUM);
        u1 = u0 + (1.0f / DEBSTR_FONT_NUM);

        texcoord[ 2 * 0 + 0 ] = texcoord[ 2 * 1 + 0 ] = u0;
        texcoord[ 2 * 2 + 0 ] = texcoord[ 2 * 3 + 0 ] = u1;
        texcoord[ 2 * 0 + 1 ] = texcoord[ 2 * 2 + 1 ] = 0.0;
        texcoord[ 2 * 1 + 1 ] = texcoord[ 2 * 3 + 1 ] = 1.0;

        _glUniform4f (locTranslate, column * fW, row * fH, 0.0f, 0.0f );

        _glDrawArrays (GL_TRIANGLE_STRIP, 0, 4);

        column ++;
    }

    _glDisable (GL_BLEND);
    _glDisableVertexAttribArray (locVtx);
    _glDisableVertexAttribArray (locUv );
    GLASSERT();

    return 0;
}


int
draw_dbgstr (char *str, int x, int y)
{
    float col_fg[] = {1.0f, 1.0f, 1.0f, 1.0f};
    float col_bg[] = {0.0f, 0.0f, 0.0f, 0.5f};
    float scale = 1.0f;

    return draw_dbgstr_ex (str, x, y, scale, col_fg, col_bg);
}


/* --------------------------------------------------------------- *
 *      pmeter
 * --------------------------------------------------------------- */
#define PMETER_MAX_LAP_NUM 128

static int    s_laptime_idx[10] = {0};
static int    s_laptime_num[10] = {0};
static float  s_laptime_stack[10][PMETER_MAX_LAP_NUM];
static double s_last_laptime[10] = {0};

double
pmeter_get_time_ms ()
{
    struct timespec tv;
    clock_gettime (CLOCK_MONOTONIC, &tv);
    return  (tv.tv_sec*1000 + (float)tv.tv_nsec/1000000.0);
} 

void
pmeter_reset_lap (int id)
{
    s_laptime_idx[id] = 0;
    s_laptime_num[id] = 0;
}

void
pmeter_set_lap (int id)
{
    if (s_laptime_idx[id] >= PMETER_MAX_LAP_NUM)
        return;

    double laptime = pmeter_get_time_ms ();
    s_laptime_stack[id][s_laptime_idx[id]] = laptime - s_last_laptime[id];
    s_laptime_idx[id] ++;
    s_laptime_num[id] ++;

    s_last_laptime[id] = laptime;
}

static void
pmeter_get_laptime (int id, int *num, float **laptime)
{
    *num = s_laptime_num[id];
    *laptime = s_laptime_stack[id];

    s_laptime_num[id] = 0;
}

double
pmeter_get_interval (int id)
{
    double interval = 0;
    for (int i = 0; i < s_laptime_num[id]; i ++)
    {
        interval += s_laptime_stack[id][i];
    }
    return interval;
}

static char vs_pmeter[] = "                  \n\
attribute vec4 a_Vertex;                     \n\
uniform   vec4 u_Translate;                  \n\
uniform   vec4 u_PrjMul, u_PrjAdd;           \n\
                                             \n\
void main()                                  \n\
{                                            \n\
   vec4 pos;                                 \n\
   pos         = a_Vertex + u_Translate;     \n\
   pos         = pos * u_PrjMul;             \n\
   gl_Position = pos + u_PrjAdd;             \n\
}                                            \n";

static char fs_pmeter[] = "                  \n\
precision mediump float;                     \n\
uniform vec4  u_Color;                       \n\
void main()                                  \n\
{                                            \n\
   gl_FragColor = u_Color;                   \n\
}                                            \n";

#define PMETER_DPY_NUM  10
#define PMETER_NUM      4
#define PMETER_DATA_NUM 1000

typedef struct pmeter_obj_t
{
    int      s_wndW, s_wndH;
    int      s_data_num;
    int      s_pm_idx[PMETER_DPY_NUM];
    GLuint   s_pm_prg;
    int      s_locVtxPM, s_locColPM, s_locTransPM;
    int      s_locPrjMulPM, s_locPrjAddPM;

    GLfloat s_vertPM[PMETER_DPY_NUM][PMETER_NUM][PMETER_DATA_NUM*2];
} pmeter_obj_t;

static pmeter_obj_t s_pmeter;


void init_pmeter (int win_w, int win_h, int data_num)
{
    int i, j, k;
    GLuint s_pm_prg = build_shader(vs_pmeter, fs_pmeter);

    s_pmeter.s_locVtxPM    = _glGetAttribLocation  (s_pm_prg, "a_Vertex" );
    s_pmeter.s_locTransPM  = _glGetUniformLocation (s_pm_prg, "u_Translate" );
    s_pmeter.s_locPrjMulPM = _glGetUniformLocation (s_pm_prg, "u_PrjMul" );
    s_pmeter.s_locPrjAddPM = _glGetUniformLocation (s_pm_prg, "u_PrjAdd" );
    s_pmeter.s_locColPM    = _glGetUniformLocation (s_pm_prg, "u_Color"  );

    if (data_num > PMETER_DATA_NUM)
        data_num = PMETER_DATA_NUM;

    for ( k = 0; k < PMETER_DPY_NUM; k ++)
    {
        s_pmeter.s_pm_idx[k] = 0;

        for ( i = 0; i < PMETER_NUM; i ++ )
        {
            for ( j = 0; j < PMETER_DATA_NUM; j ++ )
            {
                s_pmeter.s_vertPM[k][i][ 2 * j    ] = 0.0f;
                s_pmeter.s_vertPM[k][i][ 2 * j + 1] = (float)j;
            }
        }
    }
    s_pmeter.s_wndW = win_w;
    s_pmeter.s_wndH = win_h;
    s_pmeter.s_data_num = data_num;

    s_pmeter.s_pm_prg = s_pm_prg;
}

static int set_pmeter_val (int dpy_id, int id, float val)
{
    if ( id >= PMETER_NUM )
        return -1;

    if ( dpy_id >= PMETER_DPY_NUM )
        return -1;

    s_pmeter.s_vertPM[dpy_id][id][2 * s_pmeter.s_pm_idx[dpy_id] + 0] = val;
    return 0;
}

int draw_pmeter_ex (int dpy_id, int x, int y, float scale)
{
    int i, num_time;
    float vert1[] = { 0.0f, 0.0f, 0.0f, (float)PMETER_DATA_NUM };
    float vert2[] = { 0.0f, 0.0f, 100.0f, 0.0f  };
    float *laptime,sumval;
    static int   s_ncnt[PMETER_DPY_NUM] = {0};
    static float s_lap[PMETER_DPY_NUM][10] = {{0}};

    int      s_wndW        = s_pmeter.s_wndW;
    int      s_wndH        = s_pmeter.s_wndH;
    int      s_data_num    = s_pmeter.s_data_num;
    int     *s_pm_idx      = s_pmeter.s_pm_idx;
    GLuint   s_pm_prg      = s_pmeter.s_pm_prg;
    int      s_locVtxPM    = s_pmeter.s_locVtxPM;
    int      s_locColPM    = s_pmeter.s_locColPM;
    int      s_locTransPM  = s_pmeter.s_locTransPM;
    int      s_locPrjMulPM = s_pmeter.s_locPrjMulPM;
    int      s_locPrjAddPM = s_pmeter.s_locPrjAddPM;

    pmeter_get_laptime (dpy_id, &num_time, &laptime);

    sumval = 0;
    for (i = 0; i < num_time; i ++)
    {
        s_lap[dpy_id][i] += laptime[i];
        sumval += laptime[i];
    }
    s_lap[dpy_id][i] += sumval;
    s_ncnt[dpy_id] ++;

    if (laptime[0] > 100.0f) laptime[0] = 100.0f;
    if (laptime[1] > 100.0f) laptime[1] = 100.0f;
    if (laptime[2] > 100.0f) laptime[2] = 100.0f;
    if (sumval     > 100.0f) sumval     = 100.0f;
    set_pmeter_val (dpy_id, 0, laptime[0]); /* BLUE:    render */
    set_pmeter_val (dpy_id, 1, laptime[1]); /* SKYBLUE: render */
    set_pmeter_val (dpy_id, 2, laptime[2]); /* SKYBLUE: render */
    set_pmeter_val (dpy_id, 3, sumval);     /* RED:     total  */

    s_pm_idx[dpy_id] ++;
    if (s_pm_idx[dpy_id] >= s_data_num)
        s_pm_idx[dpy_id] = 0;

    _glUseProgram (s_pm_prg);

    _glBindBuffer (GL_ARRAY_BUFFER, 0);
    _glEnableVertexAttribArray (s_locVtxPM);
    _glUniform4f (s_locPrjMulPM, scale * 2.0f / (float)s_wndW, -2.0f / (float)s_wndH, 0.0f, 0.0f);
    _glUniform4f (s_locPrjAddPM, -1.0f, 1.0f, 1.0f, 1.0f);

    _glDisable (GL_DEPTH_TEST);
    _glDisable (GL_CULL_FACE );
    _glLineWidth (1.0f);

    /* AXIS */
    _glVertexAttribPointer (s_locVtxPM, 2, GL_FLOAT, GL_FALSE, 0, vert1);
    _glUniform4f (s_locColPM, 0.5f, 0.5f, 0.5f, 1.0f);
    for ( i = 1; i <= 10; i ++ )
    {
        _glUniform4f (s_locTransPM, x + i * 10, y, 0.0f, 0.0f); 
        _glDrawArrays (GL_LINES, 0, 2);
    }

    /* GRAPH */
    _glUniform4f (s_locTransPM, x, y, 0.0f, 0.0f );
    _glVertexAttribPointer (s_locVtxPM, 2, GL_FLOAT, GL_FALSE, 0, s_pmeter.s_vertPM[dpy_id][0]);
    _glUniform4f (s_locColPM,   0.0f, 0.0f, 1.0f, 1.0f);
    _glDrawArrays (GL_LINE_STRIP, 0, s_data_num);

    _glVertexAttribPointer (s_locVtxPM, 2, GL_FLOAT, GL_FALSE, 0, s_pmeter.s_vertPM[dpy_id][1]);
    _glUniform4f (s_locColPM,   0.0f, 1.0f, 1.0f, 1.0f);
    _glDrawArrays (GL_LINE_STRIP, 0, s_data_num);

    _glVertexAttribPointer (s_locVtxPM, 2, GL_FLOAT, GL_FALSE, 0, s_pmeter.s_vertPM[dpy_id][2]);
    _glUniform4f (s_locColPM, 1.0f, 0.5f, 0.2f, 1.0f);
    _glDrawArrays (GL_LINE_STRIP, 0, s_data_num);

    _glVertexAttribPointer (s_locVtxPM, 2, GL_FLOAT, GL_FALSE, 0, s_pmeter.s_vertPM[dpy_id][3]);
    _glUniform4f (s_locColPM, 1.0f, 0.0f, 0.0f, 1.0f);
    _glDrawArrays (GL_LINE_STRIP, 0, s_data_num);

    /* CURSOR */
    _glLineWidth (3.0f);
    _glVertexAttribPointer (s_locVtxPM, 2, GL_FLOAT, GL_FALSE, 0, vert2);
    _glUniform4f (s_locColPM, 0.0f, 1.0f, 0.0f, 1.0f);
    _glUniform4f (s_locTransPM, x, y + s_pm_idx[dpy_id], 0.0f, 0.0f); 
    _glDrawArrays (GL_LINES, 0, 2);

    return 0;
}

int draw_pmeter (int x, int y)
{
    return draw_pmeter_ex (0, x, y, 1.0f);
}

#endif /* EXTEND_FUNCS_IMPLEMENTATION */

